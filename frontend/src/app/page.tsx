'use client';

import React, { useState, useEffect, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { motion } from 'framer-motion';
import { MessageCircle, Database, Brain, Zap, Settings, Upload, BarChart3, Shield, Eye, CheckCircle, Home, Loader2, Send, Plus, FileText, Bot, Mic, MicOff, Paperclip, AlertCircle, Info, Clock, User, Globe, Server, Code, TrendingUp, X } from 'lucide-react';

// BEAUTIFUL AURORA LOGO - EXACT FROM AGENT BUILDER
const LuantraLogo = ({ className }: { className?: string }) => (
  <svg width="120" height="120" viewBox="0 0 200 200" className={className}>
    <defs>
      <radialGradient id="auroraCore" cx="50%" cy="50%" r="50%">
        <stop offset="0%" stopColor="#8b5cf6" stopOpacity="0.8" />
        <stop offset="50%" stopColor="#3b82f6" stopOpacity="0.6" />
        <stop offset="100%" stopColor="#06b6d4" stopOpacity="0.4" />
      </radialGradient>
      
      <linearGradient id="lGradient" x1="0%" y1="0%" x2="100%" y2="100%">
        <stop offset="0%" stopColor="#f59e0b" />
        <stop offset="25%" stopColor="#ef4444" />
        <stop offset="50%" stopColor="#8b5cf6" />
        <stop offset="75%" stopColor="#3b82f6" />
        <stop offset="100%" stopColor="#06b6d4" />
      </linearGradient>
    </defs>

    <circle cx="100" cy="100" r="90" fill="url(#auroraCore)" opacity="0.3">
      <animateTransform
        attributeName="transform"
        attributeType="XML"
        type="rotate"
        from="0 100 100"
        to="360 100 100"
        dur="15s"
        repeatCount="indefinite"
      />
    </circle>

    <g>
      <path
        d="M60 40 L60 140 L140 140 L140 120 L80 120 L80 40 Z"
        fill="url(#lGradient)"
        stroke="#ffffff"
        strokeWidth="2"
        opacity="0.9"
      />
      
      <circle cx="85" cy="70" r="6" fill="#10b981" opacity="1">
        <animate attributeName="opacity" values="0.5;1;0.5" dur="2s" repeatCount="indefinite" />
      </circle>
      <circle cx="110" cy="85" r="6" fill="#3b82f6" opacity="1">
        <animate attributeName="opacity" values="1;0.5;1" dur="2.5s" repeatCount="indefinite" />
      </circle>
      <circle cx="125" cy="110" r="6" fill="#8b5cf6" opacity="1">
        <animate attributeName="opacity" values="0.5;1;0.5" dur="3s" repeatCount="indefinite" />
      </circle>
    </g>
  </svg>
);

interface ChatMessage {
  role: 'user' | 'assistant';
  content: string;
  hasUploadButton?: boolean;
  hasFileAttachment?: boolean;
  fileName?: string;
  timestamp?: string;
  autoGenerated?: boolean;
}

interface ConversationState {
  stage: 'initial' | 'data_uploaded' | 'target_selected' | 'training' | 'deployed';
  currentDataset?: any;
  targetColumn?: string;
  modelType?: string;
  trainingJobId?: string;
}

// Model Details Modal Component
const ModelDetailsModal = ({ model, isOpen, onClose }: { model: any; isOpen: boolean; onClose: () => void }) => {
  if (!isOpen || !model) return null;

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <motion.div
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        className="bg-black/80 backdrop-blur-md rounded-2xl border border-purple-500/30 max-w-4xl w-full max-h-[90vh] overflow-y-auto"
      >
        <div className="p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-white">Agent Details</h2>
            <button onClick={onClose} className="text-gray-400 hover:text-white">
              <X className="w-6 h-6" />
            </button>
          </div>
          
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div className="space-y-4">
              <div className="bg-purple-500/10 rounded-lg p-4">
                <h3 className="text-lg font-semibold text-white mb-3">Basic Information</h3>
                <div className="space-y-2 text-sm">
                  <div><span className="text-gray-400">Agent ID:</span> <span className="text-white">{model.name}</span></div>
                  <div><span className="text-gray-400">Display Name:</span> <span className="text-white">{model.displayName}</span></div>
                  <div><span className="text-gray-400">Agent Type:</span> <span className="text-white">Luantra AI Agent</span></div>
                  <div><span className="text-gray-400">Status:</span> <span className="text-green-400">Active</span></div>
                  <div><span className="text-gray-400">Version:</span> <span className="text-white">1.0.0</span></div>
                </div>
              </div>
              
              <div className="bg-blue-500/10 rounded-lg p-4">
                <h3 className="text-lg font-semibold text-white mb-3">Performance Metrics</h3>
                <div className="space-y-2 text-sm">
                  <div><span className="text-gray-400">Accuracy:</span> <span className="text-green-400">87.3%</span></div>
                  <div><span className="text-gray-400">Precision:</span> <span className="text-blue-400">85.1%</span></div>
                  <div><span className="text-gray-400">Recall:</span> <span className="text-purple-400">89.2%</span></div>
                  <div><span className="text-gray-400">F1 Score:</span> <span className="text-yellow-400">87.1%</span></div>
                </div>
              </div>
            </div>
            
            <div className="space-y-4">
              <div className="bg-green-500/10 rounded-lg p-4">
                <h3 className="text-lg font-semibold text-white mb-3">Training Details</h3>
                <div className="space-y-2 text-sm">
                  <div><span className="text-gray-400">Dataset Size:</span> <span className="text-white">15,420 rows</span></div>
                  <div><span className="text-gray-400">Training Time:</span> <span className="text-white">2.5 hours</span></div>
                  <div><span className="text-gray-400">Compute Used:</span> <span className="text-white">Luantra Cloud</span></div>
                  <div><span className="text-gray-400">Region:</span> <span className="text-white">us-central1</span></div>
                </div>
              </div>
              
              <div className="bg-yellow-500/10 rounded-lg p-4">
                <h3 className="text-lg font-semibold text-white mb-3">API Information</h3>
                <div className="space-y-2 text-sm">
                  <div><span className="text-gray-400">Endpoint URL:</span> <span className="text-white text-xs break-all">luantra-platform/agents/{model.name}</span></div>
                  <div><span className="text-gray-400">QPS Limit:</span> <span className="text-white">100</span></div>
                  <div><span className="text-gray-400">Latency:</span> <span className="text-white">120ms</span></div>
                </div>
              </div>
            </div>
          </div>
          
          <div className="mt-6 flex space-x-3">
            <button className="bg-gradient-to-r from-purple-500 to-blue-500 text-white px-4 py-2 rounded-lg hover:shadow-lg transition-all">
              Deploy Agent
            </button>
            <button className="bg-green-500/20 text-green-300 px-4 py-2 rounded-lg hover:bg-green-500/30 transition-all">
              Test Agent
            </button>
            <button className="bg-blue-500/20 text-blue-300 px-4 py-2 rounded-lg hover:bg-blue-500/30 transition-all">
              Download
            </button>
            <button className="bg-red-500/20 text-red-300 px-4 py-2 rounded-lg hover:bg-red-500/30 transition-all">
              Archive
            </button>
          </div>
        </div>
      </motion.div>
    </div>
  );
};

const DashboardPage = () => {
  const router = useRouter();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const chatContainerRef = useRef<HTMLDivElement>(null);
  
  // State management - ALL ORIGINAL STATES
  const [activeTab, setActiveTab] = useState<'overview' | 'talk' | 'build' | 'deploy' | 'evaluate' | 'validate' | 'monitor' | 'govern'>('overview');
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([
    {
      role: 'assistant',
      content: 'Welcome to your personal Luantra AI platform! I can help you with the complete TALK.BUILD.DEPLOY pipeline using Luantra Agents.\n\nTry saying:\n• "create a housing price agent"\n• "show me my agents"\n• "build a customer classification agent"',
      timestamp: new Date().toISOString()
    }
  ]);
  const [currentMessage, setCurrentMessage] = useState("Try: 'create a housing price agent'");
  const [isLoading, setIsLoading] = useState(false);
  const [generatingEndpoints, setGeneratingEndpoints] = useState(new Set());
  const [isRecording, setIsRecording] = useState(false);
  // Voice functionality states
  const [isListening, setIsListening] = useState(false);
  const [speechRecognition, setSpeechRecognition] = useState<any>(null);
  const [speechSynthesis, setSpeechSynthesis] = useState<any>(null);
  const [voiceEnabled, setVoiceEnabled] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [conversationState, setConversationState] = useState<ConversationState>({
    stage: 'initial'
  });
  const [showProgress, setShowProgress] = useState(false);
  const [progressData, setProgressData] = useState({
    percentage: 0,
    stage: 'Ready to start training',
    timeRemaining: 'Not started',
    jobId: null
  });  
  const [autoRefreshEnabled, setAutoRefreshEnabled] = useState(false);
  
  // Platform data - ROBUST INITIALIZATION
  const [platformData, setPlatformData] = useState({
    datasets: [],
    models: [],
    trainingJobs: [],
    endpoints: []
  });

  // Model details modal
  const [selectedModel, setSelectedModel] = useState(null);
  const [isModelModalOpen, setIsModelModalOpen] = useState(false);

  // ROBUST ARRAY HELPER FUNCTION
  const ensureArray = (data: any): any[] => {
    if (Array.isArray(data)) return data;
    if (!data) return [];
    if (typeof data === 'object' && data.items && Array.isArray(data.items)) return data.items;
    return [];
  };

  // FIXED: Load chat history on component mount
  useEffect(() => {
    const loadChatHistory = async () => {
      try {
        const response = await fetch('https://luantra-backend-fldu2pxc4a-uc.a.run.app/api/chat-history/dashboard-session');
        const data = await response.json();
        
        if (data.success && data.history.length > 0) {
          setChatMessages(data.history);
          if (data.stage) {
            setConversationState(prev => ({
              ...prev,
              stage: data.stage,
              currentDataset: data.currentDataset,
              currentModel: data.currentModel,
              currentEndpoint: data.currentEndpoint
            }));
          }
        }
      } catch (error) {
        console.error('Error loading chat history:', error);
      }
    };

    loadChatHistory();
  }, []);

  // FIXED: Enhanced auto-refresh with real-time sync
  useEffect(() => {
    let intervalId: NodeJS.Timeout | null = null;
    
    if (autoRefreshEnabled || showProgress) {
      intervalId = setInterval(async () => {
        try {
          const response = await fetch('https://luantra-backend-fldu2pxc4a-uc.a.run.app/api/training-progress/dashboard-session');
          const data = await response.json();
          
          if (data.hasActiveJob && data.progress) {
            // FIXED: Validate all progress data before setting state
            setProgressData({
              percentage: Math.min(100, Math.max(0, data.progress.percentage || 0)),
              stage: data.progress.currentStage || 'Processing...',
              timeRemaining: data.progress.timeRemaining || 'Calculating...',
              jobId: data.jobName || null
            });
            
            setShowProgress(true);
            
            if (data.isComplete || data.hasFailed) {
              setAutoRefreshEnabled(false);
              setShowProgress(false);
              await loadPlatformData();
            }
          } else {
            setShowProgress(false);
          }
        } catch (error) {
          console.error('Auto-refresh error:', error);
          // Don't update progress on error to avoid NaN values
        }
      }, 10000);
    }
    
    return () => {
      if (intervalId) clearInterval(intervalId);
    };
  }, [autoRefreshEnabled, showProgress]);

  // Check for new auto-generated messages periodically
  useEffect(() => {
    const messageCheckInterval = setInterval(async () => {
      try {
        const response = await fetch('https://luantra-backend-fldu2pxc4a-uc.a.run.app/api/chat-history/dashboard-session');
        const data = await response.json();
        
        if (data.success && data.history.length > chatMessages.length) {
          console.log('New auto-completion messages detected, updating chat...');
          setChatMessages(data.history);
          
          // ENHANCED: Handle different types of auto-generated messages
          const newMessages = data.history.slice(chatMessages.length);
          newMessages.forEach((msg: ChatMessage) => {
            if (msg.autoGenerated) {
              // Speak auto-generated messages if voice enabled
              if (voiceEnabled) {
                setTimeout(() => speakResponse(msg.content), 500);
              }
              
              // Handle special notification types if needed
              if ((msg as any).notificationType === 'training_completed') {
                // Could trigger additional UI updates here
                console.log('Training completion notification received');
              }
            }
          });
        }
      } catch (error) {
        console.error('Error checking for auto-messages:', error);
      }
    }, 15000); // Check every 15 seconds (less frequent than progress check)
    
    return () => clearInterval(messageCheckInterval);
  }, [chatMessages.length, voiceEnabled]);
  
  
  useEffect(() => {
    loadPlatformData();
  }, []);

  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }, [chatMessages]);
  
  // Initialize voice capabilities
  useEffect(() => {
    if (typeof window !== 'undefined') {
      // Check for speech recognition support
      const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
      if (SpeechRecognition) {
        const recognition = new SpeechRecognition();
        recognition.continuous = false;
        recognition.interimResults = false;
        recognition.lang = 'en-US';
        
        recognition.onresult = (event: any) => {
          const transcript = event.results[0][0].transcript;
          setCurrentMessage(transcript);
          setIsListening(false);
        };
        
        recognition.onerror = () => {
          setIsListening(false);
        };
        
        recognition.onend = () => {
          setIsListening(false);
        };
        
        setSpeechRecognition(recognition);
      }
      
      // Check for speech synthesis support
      if ((window as any).speechSynthesis) {
        setSpeechSynthesis((window as any).speechSynthesis);
      }
      
      setVoiceEnabled(true);
    }
  }, []);

  // ROBUST PLATFORM DATA LOADING
  const loadPlatformData = async () => {
    try {
      const [datasetsRes, modelsRes, jobsRes, endpointsRes] = await Promise.all([
        fetch('https://luantra-backend-fldu2pxc4a-uc.a.run.app/api/datasets').catch(() => ({ ok: false })),
        fetch('https://luantra-backend-fldu2pxc4a-uc.a.run.app/api/models').catch(() => ({ ok: false })),
        fetch('https://luantra-backend-fldu2pxc4a-uc.a.run.app/api/training-jobs').catch(() => ({ ok: false })),
        fetch('https://luantra-backend-fldu2pxc4a-uc.a.run.app/api/endpoints').catch(() => ({ ok: false }))
      ]);

      const datasets = datasetsRes.ok ? ensureArray(await datasetsRes.json()) : [];
      const models = modelsRes.ok ? ensureArray(await modelsRes.json()) : [];
      const trainingJobs = jobsRes.ok ? ensureArray(await jobsRes.json()) : [];
      const endpoints = endpointsRes.ok ? ensureArray(await endpointsRes.json()) : [];

      setPlatformData({ 
        datasets: ensureArray(datasets), 
        models: ensureArray(models), 
        trainingJobs: ensureArray(trainingJobs), 
        endpoints: ensureArray(endpoints) 
      });
    } catch (error) {
      console.error('Error loading platform data:', error);
      // Ensure arrays even on error
      setPlatformData({
        datasets: [],
        models: [],
        trainingJobs: [],
        endpoints: []
      });
    }
  };

  const handleSendMessage = async () => {
    if (!currentMessage.trim() || isLoading) return;
  
    const userMessage: ChatMessage = {
      role: 'user',
      content: currentMessage,
      timestamp: new Date().toISOString()
    };
  
    setChatMessages(prev => [...prev, userMessage]);
    setCurrentMessage('');
    setIsLoading(true);
  
    try {
      const response = await fetch('https://luantra-backend-fldu2pxc4a-uc.a.run.app/api/chat/luantra-agent', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: currentMessage,
          conversationState,
          platformData,
          sessionId: 'dashboard-session'
        })
      });
  
      const agentResponse = await response.json();
      
      const assistantMessage: ChatMessage = {
        role: 'assistant',
        content: agentResponse.message,
        hasUploadButton: agentResponse.actions?.some(action => action.type === 'upload'),
        timestamp: new Date().toISOString()
      };
  
      setChatMessages(prev => [...prev, assistantMessage]);
      
      // Speak the response if voice is enabled
      setTimeout(() => speakResponse(agentResponse.message), 500);
  
      // ENHANCED: Handle navigation actions from backend
      if (agentResponse.action?.type === 'navigate') {
        if (agentResponse.action.url) {
          // Navigate to the custom UI
          setTimeout(() => {
            router.push(agentResponse.action.url);
          }, 2000); // Give user time to read the message
        }
      }
  
      // Update conversation state based on agent response
      if (agentResponse.newState) {
        setConversationState(agentResponse.newState);
        
        // Start auto-refresh if training started
        if (agentResponse.newState.stage === 'training') {
          setAutoRefreshEnabled(true);
          setShowProgress(true);
        }
      }
  
      // ENHANCED: Handle progress updates from auto-completion
      if (agentResponse.showProgress) {
        setShowProgress(true);
        if (agentResponse.progressData) {
          setProgressData(agentResponse.progressData);
        }
      }
  
      // ENHANCED: Handle completion notifications
      if (agentResponse.showProgressComplete || agentResponse.autoCompleted) {
        setShowProgress(false);
        setAutoRefreshEnabled(false);
        
        // Reload platform data to show new models/endpoints
        setTimeout(loadPlatformData, 1000);
      }
  
      // Handle other actions
      if (agentResponse.actions) {
        for (const action of agentResponse.actions) {
          switch (action.type) {
            case 'navigate':
              if (action.tab) setActiveTab(action.tab);
              break;
            case 'start_training':
              await startLuantraAgentTraining(action.data);
              break;
            case 'deploy_agent':
              await deployAgent(action.modelId);
              break;
          }
        }
      }
  
      // Reload platform data after any chat interaction
      setTimeout(loadPlatformData, 1000);
  
    } catch (error) {
      // Existing fallback logic remains the same
      console.error('Chat error:', error);
      const errorMessage = {
        role: 'assistant' as const,
        content: 'I encountered an issue connecting to the backend. Please check that the server is running on port 3001.',
        timestamp: new Date().toISOString()
      };
      setChatMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  // FIXED FILE UPLOAD FUNCTION
  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setIsUploading(true);
    
    const uploadMessage: ChatMessage = {
      role: 'user',
      content: `Uploading dataset: ${file.name}`,
      hasFileAttachment: true,
      fileName: file.name,
      timestamp: new Date().toISOString()
    };
    setChatMessages(prev => [...prev, uploadMessage]);

    try {
      // Show processing message immediately
      const processingMessage: ChatMessage = {
        role: 'assistant',
        content: 'Processing your dataset... This may take a moment.',
        timestamp: new Date().toISOString()
      };
      setChatMessages(prev => [...prev, processingMessage]);

      const formData = new FormData();
      formData.append('file', file);

      const response = await fetch('https://luantra-backend-fldu2pxc4a-uc.a.run.app/api/upload', {
        method: 'POST',
        body: formData
      });

      const result = await response.json();

      if (response.ok && result.analysis) {
        // Success with detailed analysis
        const analysis = result.analysis;
        const analysisMessage: ChatMessage = {
          role: 'assistant',
          content: `✅ Dataset analyzed successfully!\n\n📊 **${file.name}**\n• Rows: ${analysis.rowCount || 'Unknown'}\n• Total Rows: ${analysis.totalRows || 'Unknown'}\n• Columns: ${analysis.columns?.length || 'Unknown'}\n• Key columns: ${analysis.columns?.slice(0, 5).join(', ') || 'None'}\n\n${analysis.suggestedTargets?.length > 0 ? `🎯 **Suggested target columns**: ${analysis.suggestedTargets.join(', ')}\n\n` : ''}What type of agent would you like to create?\n• "predict ${analysis.suggestedTargets?.[0] || 'values'}" - Regression model\n• "classify ${analysis.columns?.find((c: string) => c.toLowerCase().includes('category') || c.toLowerCase().includes('type')) || 'items'}" - Classification model\n• "create custom agent" - Custom AI assistant`,
          timestamp: new Date().toISOString()
        };
        setChatMessages(prev => [...prev, analysisMessage]);

        setConversationState({
          ...conversationState,
          stage: 'data_uploaded',
          currentDataset: result.file
        });

        await loadPlatformData();
      } else {
        throw new Error(result.error || 'Upload failed - no analysis returned');
      }
    } catch (error) {
      console.error('Upload error:', error);
      const errorMessage: ChatMessage = {
        role: 'assistant',
        content: `❌ Upload failed: ${error instanceof Error ? error.message : 'Unknown error'}\n\nPlease check:\n• Backend is running on port 3001\n• File is CSV, JSON, or Excel format\n• File size is under 100MB\n• Network connection is stable\n\nTry uploading a different file or restart the backend.`,
        timestamp: new Date().toISOString()
      };
      setChatMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsUploading(false);
    }
  };

  
  // Voice input handler
  const handleVoiceInput = () => {
    if (!voiceEnabled || !speechRecognition) {
      alert('Voice recognition not supported in this browser');
      return;
    }
    
    if (isListening) {
      speechRecognition.stop();
      setIsListening(false);
    } else {
      setIsListening(true);
      speechRecognition.start();
    }
  };

  // Text-to-speech for Gemini responses
  // ENHANCED: Clean text-to-speech that only reads essential content
const speakResponse = (text: string) => {
  if (!voiceEnabled || !speechSynthesis) return;
  
  // Cancel any ongoing speech
  speechSynthesis.cancel();
  
  // COMPREHENSIVE text cleaning for voice reading
  let cleanText = text
    // Remove all emojis and symbols
    .replace(/[\u{1F300}-\u{1F9FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/gu, '')
    // Remove markdown formatting
    .replace(/[#*•`_~]/g, '')
    // Remove section headers and identifiers
    .replace(/\*\*[^*]*\*\*/g, '') // Remove **bold** text
    .replace(/\n+/g, '. ') // Convert line breaks to periods
    // Remove technical identifiers and URLs
    .replace(/http[s]?:\/\/[^\s]+/g, 'link available')
    .replace(/\/[a-zA-Z0-9/_-]+/g, '') // Remove paths
    .replace(/[A-Z0-9_-]{8,}/g, '') // Remove long identifiers
    // Remove status indicators
    .replace(/\([^)]*\)/g, '') // Remove parenthetical content
    .replace(/\[[^\]]*\]/g, '') // Remove bracketed content
    // Remove percentages and technical numbers when they're status indicators
    .replace(/\d+%\s*(complete|done|ready)/gi, 'nearly complete')
    .replace(/\d+\.\d+\s*(minutes?|seconds?)\s*(remaining|left)/gi, 'almost finished')
    // Clean up multiple spaces and punctuation
    .replace(/\s+/g, ' ')
    .replace(/[.]{2,}/g, '.')
    .replace(/\s*[.]\s*[.]/g, '.')
    .trim();

  // Extract only the most important sentences for voice
  const sentences = cleanText.split(/[.!?]+/).filter(s => s.trim().length > 0);
  
  // Prioritize key information sentences
  const keyPhrases = [
    'training completed',
    'model ready',
    'interface generated', 
    'ready to use',
    'deployment successful',
    'training started',
    'upload successful',
    'error occurred',
    'failed to',
    'custom interface',
    'personalized',
    'predictions available'
  ];
  
  // Find the most important sentences
  const importantSentences = sentences.filter(sentence => {
    const lowerSentence = sentence.toLowerCase();
    return keyPhrases.some(phrase => lowerSentence.includes(phrase));
  });
  
  // Use important sentences, or fallback to first 2 sentences
  const sentencesToSpeak = importantSentences.length > 0 
    ? importantSentences.slice(0, 2) 
    : sentences.slice(0, 2);
  
  const finalText = sentencesToSpeak.join('. ').trim();
  
  // Only speak if we have meaningful content
  if (finalText.length > 10) {
    const utterance = new SpeechSynthesisUtterance(finalText);
    utterance.rate = 0.9;
    utterance.pitch = 1.0;
    utterance.volume = 0.8;
    
    // Use preferred voice
    const voices = speechSynthesis.getVoices();
    const preferredVoice = voices.find(voice => 
      voice.name.includes('Google') || 
      voice.name.includes('Alex') || 
      voice.name.includes('Samantha')
    ) || voices[0];
    
    if (preferredVoice) {
      utterance.voice = preferredVoice;
    }
    
    console.log('Speaking cleaned text:', finalText);
    speechSynthesis.speak(utterance);
  }
};

const handleClearChat = async () => {
  try {
    setIsLoading(true);
    
    // Call backend to clear chat history
    const response = await fetch('https://luantra-backend-fldu2pxc4a-uc.a.run.app/api/clear-chat/dashboard-session', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });
    
    const result = await response.json();
    
    if (result.success) {
      // Clear local chat state
      setChatMessages([{
        role: 'assistant',
        content: 'Chat cleared successfully. Welcome back to Luantra. Upload a dataset to begin building your AI models.',
        timestamp: new Date().toISOString()
      }]);
      
      // Reset conversation state
      setConversationState({
        stage: 'initial'
      });
      
      // Reset progress indicators
      setShowProgress(false);
      setAutoRefreshEnabled(false);
      setProgressData({
        percentage: 0,
        stage: '',
        timeRemaining: '',
        jobId: null
      });
      
      // Reload platform data to refresh everything
      await loadPlatformData();
      
      console.log('Chat cleared and reset successfully');
    } else {
      throw new Error(result.error || 'Failed to clear chat');
    }
  } catch (error) {
    console.error('Error clearing chat:', error);
    // Show error message
    setChatMessages(prev => [...prev, {
      role: 'assistant',
      content: 'Error clearing chat. Please refresh the page to reset.',
      timestamp: new Date().toISOString()
    }]);
  } finally {
    setIsLoading(false);
  }
};

const ChatHeader = () => (
  <div className="flex items-center justify-between mb-4">
    <div className="flex items-center">
      <div className="w-3 h-3 bg-green-400 rounded-full mr-3"></div>
      <MessageCircle className="w-6 h-6 text-white mr-2" />
      <h3 className="text-xl font-semibold text-white">Luantra Agent Assistant</h3>
      <span className="ml-2 text-2xl">✨</span>
    </div>
    
    <div className="flex items-center space-x-3">
      {/* Clear Chat Button */}
      <button
        onClick={handleClearChat}
        disabled={isLoading}
        className="px-3 py-1 bg-red-500/20 text-red-300 rounded-lg hover:bg-red-500/30 transition-colors text-sm flex items-center space-x-1 disabled:opacity-50"
        title="Clear chat history and start over"
      >
        <X className="w-4 h-4" />
        <span>Clear</span>
      </button>
      
      {/* Voice Status */}
      {voiceEnabled && (
        <div className="flex items-center space-x-2 text-xs text-purple-300">
          <div className="flex items-center space-x-1">
            <div className={`w-2 h-2 rounded-full ${speechRecognition ? 'bg-green-400' : 'bg-red-400'}`}></div>
            <span>Voice Input: {speechRecognition ? 'Ready' : 'Not Available'}</span>
          </div>
          <div className="flex items-center space-x-1">
            <div className={`w-2 h-2 rounded-full ${speechSynthesis ? 'bg-green-400' : 'bg-red-400'}`}></div>
            <span>Voice Output: {speechSynthesis ? 'Ready' : 'Not Available'}</span>
          </div>
        </div>
      )}
    </div>
  </div>
);

  // Start Luantra Agent training
  const startLuantraAgentTraining = async (trainingData: any) => {
    try {
      const response = await fetch('https://luantra-backend-fldu2pxc4a-uc.a.run.app/api/agents/train', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(trainingData)
      });

      const result = await response.json();
      
      const trainingMessage: ChatMessage = {
        role: 'assistant',
        content: `Great! I've started training your Luantra Agent. Job ID: ${result.jobId}. You can monitor progress in the BUILD tab.`,
        timestamp: new Date().toISOString()
      };
      setChatMessages(prev => [...prev, trainingMessage]);

      setConversationState({
        ...conversationState,
        stage: 'training',
        trainingJobId: result.jobId
      });

      setActiveTab('build');
      
    } catch (error) {
      const errorMessage: ChatMessage = {
        role: 'assistant',
        content: 'I encountered an issue starting the agent training. Let me check the backend connection.',
        timestamp: new Date().toISOString()
      };
      setChatMessages(prev => [...prev, errorMessage]);
    }
  };

  // Deploy agent
  const deployAgent = async (modelId: string) => {
    try {
      const response = await fetch('https://luantra-backend-fldu2pxc4a-uc.a.run.app/api/agents/deploy', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ modelId })
      });

      const result = await response.json();
      
      const deployMessage: ChatMessage = {
        role: 'assistant',
        content: `Perfect! Your Luantra Agent is now deployed and ready for use. You can test it in the DEPLOY tab.`,
        timestamp: new Date().toISOString()
      };
      setChatMessages(prev => [...prev, deployMessage]);

      setConversationState({
        ...conversationState,
        stage: 'deployed'
      });

      setActiveTab('deploy');
      
    } catch (error) {
      const errorMessage: ChatMessage = {
        role: 'assistant',
        content: 'I had trouble deploying the agent. Let me check the status.',
        timestamp: new Date().toISOString()
      };
      setChatMessages(prev => [...prev, errorMessage]);
    }
  };

  // Model click handler
  const handleModelClick = (model: any) => {
    setSelectedModel(model);
    setIsModelModalOpen(true);
  };

  // ENHANCED: Generate dynamic model interface using Gemini with proper error handling
  const generateModelInterface = async (endpoint: any) => {
    try {
      setIsLoading(true);
      console.log('Generating personalized interface for:', endpoint);
      
      // Show enhanced generation message in chat
      setChatMessages(prev => [...prev, {
        role: 'assistant',
        content: `🎨 **Creating Personalized Interface**\n\nAnalyzing model "${endpoint.displayName}" and its training dataset...\n\n🔍 Finding original dataset used for training\n📊 Extracting column names and data types\n🎯 Creating input fields for each feature\n✨ Personalizing UI for your specific model\n\nThis will generate a truly custom interface!`,
        timestamp: new Date().toISOString()
      }]);
      
      // Call backend with enhanced payload
      const response = await fetch('https://luantra-backend-fldu2pxc4a-uc.a.run.app/api/generate-model-interface', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          endpoint: endpoint,
          modelName: endpoint.displayName,
          modelId: endpoint.name.split('/').pop() || `model-${Date.now()}`,
          // Additional context to help backend find dataset
          endpointId: endpoint.id,
          modelDisplayName: endpoint.displayName
        })
      });
  
      if (!response.ok) {
        const errorText = await response.text();
        console.error('HTTP Error:', response.status, errorText);
        throw new Error(`HTTP ${response.status}: ${errorText}`);
      }
  
      const contentType = response.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        const htmlText = await response.text();
        console.error('Expected JSON but got:', contentType, htmlText.substring(0, 200));
        throw new Error('Backend returned non-JSON response');
      }
      
      const result = await response.json();
      
      if (result.success) {
        // Show detailed success message with personalization info
        setChatMessages(prev => [...prev, {
          role: 'assistant',
          content: `✅ **Personalized Interface Generated Successfully!**\n\n🎯 **Model:** ${result.modelName}\n📊 **Dataset:** ${result.datasetName || 'Analyzed'}\n🔢 **Features:** ${result.features} personalized input fields\n🎨 **Type:** ${result.modelType === 'classification' ? 'Classification Model' : 'Prediction Model'}\n${result.targetColumn ? `🎯 **Target:** ${result.targetColumn}\n` : ''}\n**✨ Fully Personalized Features:**\n• Input fields match your exact dataset columns\n• Smart field types (numbers, dropdowns, text)\n• Real column names as labels\n• Dataset-specific validation\n• Professional prediction display\n\n🚀 **Perfect for clients!** They can now make predictions using your model without any technical knowledge.\n\nNavigating to your custom interface...`,
          timestamp: new Date().toISOString()
        }]);
        
        // Navigate to the dynamically created page after a brief delay
        setTimeout(() => {
          router.push(result.path);
        }, 2000);
      } else {
        throw new Error(result.error || 'Failed to generate personalized interface');
      }
    } catch (error) {
      console.error('Error generating model interface:', error);
      
      // Show specific error handling with troubleshooting
      let errorMessage = '❌ **Personalized Interface Generation Failed**\n\n';
      if (error instanceof Error) {
        if (error.message.includes('dataset analysis found')) {
          errorMessage += 'No dataset analysis found for this model.\n\n**This happens when:**\n• Model was created before dataset upload\n• Training job didn\'t save dataset reference\n• Dataset analysis is missing\n\n**Solutions:**\n• Re-upload the original dataset\n• Train a new model with proper dataset\n• Check that training completed successfully';
        } else if (error.message.includes('HTTP 500')) {
          errorMessage += 'Server error during personalization.\n\n**Troubleshooting:**\n• Check that training job has dataset reference\n• Verify dataset analysis is complete\n• Ensure model was trained properly\n• Check server logs for details';
        } else if (error.message.includes('non-JSON response')) {
          errorMessage += 'Backend endpoint communication error.\n\n**Troubleshooting:**\n• Verify backend is running on port 3001\n• Check /api/generate-model-interface endpoint exists\n• Restart backend server\n• Verify network connectivity';
        } else {
          errorMessage += error.message + '\n\n**General Troubleshooting:**\n• Ensure model has associated dataset\n• Check that dataset analysis completed\n• Verify training job finished successfully\n• Try refreshing the page';
        }
      } else {
        errorMessage += 'Unknown error during interface generation\n\n**Next Steps:**\n• Check browser console for details\n• Verify backend server is running\n• Try generating interface for different model\n• Restart both frontend and backend';
      }
      
      setChatMessages(prev => [...prev, {
        role: 'assistant',
        content: errorMessage,
        timestamp: new Date().toISOString()
      }]);
    } finally {
      setIsLoading(false);
    }
  };
  
  // Logout handler
  const handleLogout = () => {
    localStorage.removeItem('luantra_user');
    sessionStorage.clear();
    router.push('/auth/login');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 relative overflow-hidden">
      {/* Aurora background effects - EXACT from agent builder */}
      <div className="absolute inset-0 opacity-30">
        <div className="absolute top-0 left-1/4 w-96 h-96 bg-blue-500 rounded-full mix-blend-multiply filter blur-xl animate-pulse"></div>
        <div className="absolute top-0 right-1/4 w-96 h-96 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl animate-pulse animation-delay-2000"></div>
        <div className="absolute bottom-0 left-1/3 w-96 h-96 bg-pink-500 rounded-full mix-blend-multiply filter blur-xl animate-pulse animation-delay-4000"></div>
      </div>
      
      {/* Hidden file input */}
      <input
        type="file"
        ref={fileInputRef}
        onChange={handleFileSelect}
        accept=".csv,.json,.xlsx,.xls"
        className="hidden"
      />

      {/* FIXED: Progress bar overlay when training */}
      {showProgress && (
  <div className="fixed top-0 left-0 right-0 z-50 bg-black/80 backdrop-blur-sm border-b border-purple-500/30 p-4">
    <div className="max-w-4xl mx-auto">
      <div className="flex items-center justify-between mb-2">
        <span className="text-white font-medium">Training in Progress</span>
        <span className="text-purple-300 text-sm">
          {progressData.timeRemaining && progressData.timeRemaining !== 'undefined' 
            ? progressData.timeRemaining 
            : 'Calculating...'}
        </span>
      </div>
      <div className="w-full bg-gray-700 rounded-full h-3">
        <div 
          className="bg-gradient-to-r from-purple-500 to-blue-500 h-3 rounded-full transition-all duration-1000"
          style={{ 
            width: `${Math.min(100, Math.max(0, progressData.percentage || 0))}%` 
          }}
        ></div>
      </div>
      <p className="text-purple-200 text-sm mt-2">
        {progressData.stage && progressData.stage !== 'undefined' 
          ? progressData.stage 
          : 'Processing...'}
      </p>
    </div>
  </div>
)}

      {/* Header - EXACT styling from agent builder */}
      <header className="relative z-10 p-6 border-b border-purple-500/20 backdrop-blur-sm">
        <div className="max-w-7xl mx-auto flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <LuantraLogo className="w-12 h-12" />
            <div>
              <h1 className="text-2xl font-bold bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 bg-clip-text text-transparent">
                Luantra
              </h1>
              <p className="text-purple-300 text-sm">Welcome, lucas.zarzeczny@gmail.com</p>
            </div>
          </div>
          
          <div className="flex items-center space-x-4">
            {/* ALL 8 TABS */}
            {(['overview', 'talk', 'build', 'deploy', 'evaluate', 'validate', 'monitor', 'govern'] as const).map((tab) => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                className={`px-4 py-2 rounded-full font-medium transition-all ${
                  activeTab === tab
                    ? 'bg-purple-500 text-white'
                    : 'text-gray-300 hover:text-white'
                }`}
              >
                {tab.toUpperCase()}
              </button>
            ))}
            
            <button
              onClick={() => router.push('/agent-builder')}
              className="bg-gradient-to-r from-purple-500 to-pink-500 text-white px-4 py-2 rounded-lg hover:shadow-lg transition-all duration-300 flex items-center space-x-2"
            >
              <Bot className="w-4 h-4" />
              <span>Agent Builder</span>
            </button>
            
            <button
              onClick={handleLogout}
              className="text-gray-300 hover:text-white flex items-center space-x-1"
            >
              <span>Logout</span>
            </button>
          </div>
        </div>
      </header>

      {/* Main Content - Centered with relative z-index */}
      <main className="relative z-10 max-w-7xl mx-auto p-6">
        {/* COLORFUL TALK.BUILD.DEPLOY Title */}
        <div className="text-center mb-8">
          <h1 className="text-6xl font-bold flex items-center justify-center space-x-4">
            <span className="bg-gradient-to-r from-cyan-400 to-cyan-300 bg-clip-text text-transparent animate-pulse">TALK</span>
            <span className="text-white">•</span>
            <span className="bg-gradient-to-r from-purple-400 to-purple-300 bg-clip-text text-transparent animate-pulse animation-delay-1000">BUILD</span>
            <span className="text-white">•</span>
            <span className="bg-gradient-to-r from-orange-400 to-orange-300 bg-clip-text text-transparent animate-pulse animation-delay-2000">DEPLOY</span>
          </h1>
          <p className="text-gray-300 text-xl mt-2">Your Personal Luantra Agent Platform for End-to-End AI Operations</p>
          <div className="mt-4 text-center">
            <p className="text-purple-200 text-lg max-w-4xl mx-auto">
              Upload your data, chat with Luantra Agent to define your requirements, and watch as we automatically build, train, and deploy production-ready AI agents on Luantra Cloud. Complete with evaluation, validation, monitoring, and governance services.
            </p>
          </div>
        </div>

        {/* Tab Content */}
        <div className="space-y-8">
          {/* OVERVIEW TAB - ENHANCED WITH LUANTRA AGENT DESCRIPTION */}
          {activeTab === 'overview' && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="space-y-6"
            >
              {/* Platform Description */}
              <div className="bg-black/30 backdrop-blur-sm rounded-2xl p-8 border border-purple-500/30 text-center">
                <h2 className="text-3xl font-bold text-white mb-4">Welcome to Luantra Agent Platform</h2>
                <p className="text-purple-200 text-lg mb-6 max-w-4xl mx-auto">
                  The only platform where you can <span className="text-cyan-400 font-bold">TALK</span> with Luantra Agent to describe what you want, 
                  automatically <span className="text-purple-400 font-bold">BUILD</span> and train agents on Luantra Cloud, 
                  and seamlessly <span className="text-orange-400 font-bold">DEPLOY</span> them for production use.
                </p>
                
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-8">
                  <div className="bg-cyan-500/10 border border-cyan-500/30 rounded-xl p-6">
                    <MessageCircle className="w-10 h-10 text-cyan-400 mx-auto mb-4" />
                    <h3 className="text-xl font-bold text-cyan-300 mb-2">TALK</h3>
                    <p className="text-gray-300 text-sm">
                      Chat with Luantra Agent to describe your requirements. Upload your dataset and explain what you want to predict. 
                      Our AI understands natural language and guides you through the entire process.
                    </p>
                  </div>
                  
                  <div className="bg-purple-500/10 border border-purple-500/30 rounded-xl p-6">
                    <Brain className="w-10 h-10 text-purple-400 mx-auto mb-4" />
                    <h3 className="text-xl font-bold text-purple-300 mb-2">BUILD</h3>
                    <p className="text-gray-300 text-sm">
                      Watch as we automatically configure, train, and optimize your agents using Luantra Cloud infrastructure. 
                      Real training jobs, real compute resources, real machine learning at scale.
                    </p>
                  </div>
                  
                  <div className="bg-orange-500/10 border border-orange-500/30 rounded-xl p-6">
                    <Zap className="w-10 h-10 text-orange-400 mx-auto mb-4" />
                    <h3 className="text-xl font-bold text-orange-300 mb-2">DEPLOY</h3>
                    <p className="text-gray-300 text-sm">
                      Deploy your trained agents to production endpoints with monitoring, validation, and governance. 
                      Get API access, performance metrics, and enterprise-grade reliability.
                    </p>
                  </div>
                </div>
              </div>

              {/* Platform Statistics - ENHANCED */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <div className="bg-black/30 backdrop-blur-sm rounded-xl p-4 border border-purple-500/30">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-purple-300 text-sm">Datasets Uploaded</p>
                      <p className="text-2xl font-bold text-white">{ensureArray(platformData.datasets).length}</p>
                      <p className="text-purple-400 text-xs mt-1">Ready for training</p>
                    </div>
                    <Database className="w-8 h-8 text-purple-400" />
                  </div>
                </div>
                
                <div className="bg-black/30 backdrop-blur-sm rounded-xl p-4 border border-blue-500/30">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-blue-300 text-sm">AI Agents Created</p>
                      <p className="text-2xl font-bold text-white">{ensureArray(platformData.models).length}</p>
                      <p className="text-blue-400 text-xs mt-1">Production ready</p>
                    </div>
                    <Brain className="w-8 h-8 text-blue-400" />
                  </div>
                </div>
                
                <div className="bg-black/30 backdrop-blur-sm rounded-xl p-4 border border-green-500/30">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-green-300 text-sm">Training Jobs</p>
                      <p className="text-2xl font-bold text-white">{ensureArray(platformData.trainingJobs).length}</p>
                      <p className="text-green-400 text-xs mt-1">Luantra powered</p>
                    </div>
                    <Settings className="w-8 h-8 text-green-400" />
                  </div>
                </div>
                
                <div className="bg-black/30 backdrop-blur-sm rounded-xl p-4 border border-yellow-500/30">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-yellow-300 text-sm">Live Endpoints</p>
                      <p className="text-2xl font-bold text-white">{ensureArray(platformData.endpoints).length}</p>
                      <p className="text-yellow-400 text-xs mt-1">Serving predictions</p>
                    </div>
                    <Zap className="w-8 h-8 text-yellow-400" />
                  </div>
                </div>
              </div>

              {/* Quick Start Actions */}
              <div className="bg-black/30 backdrop-blur-sm rounded-2xl p-6 border border-purple-500/30">
                <h3 className="text-xl font-semibold text-white mb-4">Quick Start</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <button
                    onClick={() => setActiveTab('talk')}
                    className="bg-gradient-to-r from-purple-500 to-blue-500 text-white p-4 rounded-lg hover:shadow-lg transition-all duration-300"
                  >
                    <MessageCircle className="w-6 h-6 mb-2" />
                    <p className="font-medium">Start Conversation</p>
                    <p className="text-sm opacity-80">Talk with Luantra Agent</p>
                  </button>
                  
                  <button
                    onClick={() => router.push('/agent-builder')}
                    className="bg-gradient-to-r from-green-500 to-blue-500 text-white p-4 rounded-lg hover:shadow-lg transition-all duration-300"
                  >
                    <Bot className="w-6 h-6 mb-2" />
                    <p className="font-medium">Build Agent</p>
                    <p className="text-sm opacity-80">Create custom AI</p>
                  </button>
                  
                  <button
                    onClick={() => setActiveTab('deploy')}
                    className="bg-gradient-to-r from-yellow-500 to-red-500 text-white p-4 rounded-lg hover:shadow-lg transition-all duration-300"
                  >
                    <Zap className="w-6 h-6 mb-2" />
                    <p className="font-medium">Deploy Agent</p>
                    <p className="text-sm opacity-80">Go live with AI</p>
                  </button>
                </div>
              </div>

              {/* Service Status Grid */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <div className="bg-green-500/10 border border-green-500/30 rounded-lg p-4 text-center">
                  <BarChart3 className="w-6 h-6 text-green-400 mx-auto mb-2" />
                  <h4 className="text-green-300 font-medium">Evaluation as a Service</h4>
                  <p className="text-green-400 text-sm">Performance tracking</p>
                </div>
                <div className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4 text-center">
                  <CheckCircle className="w-6 h-6 text-blue-400 mx-auto mb-2" />
                  <h4 className="text-blue-300 font-medium">Validation as a Service</h4>
                  <p className="text-blue-400 text-sm">Quality assurance</p>
                </div>
                <div className="bg-purple-500/10 border border-purple-500/30 rounded-lg p-4 text-center">
                  <Eye className="w-6 h-6 text-purple-400 mx-auto mb-2" />
                  <h4 className="text-purple-300 font-medium">Monitoring as a Service</h4>
                  <p className="text-purple-400 text-sm">Real-time insights</p>
                </div>
                <div className="bg-amber-500/10 border border-amber-500/30 rounded-lg p-4 text-center">
                  <Shield className="w-6 h-6 text-amber-400 mx-auto mb-2" />
                  <h4 className="text-amber-300 font-medium">Governance as a Service</h4>
                  <p className="text-amber-400 text-sm">Compliance & security</p>
                </div>
              </div>

              {/* Agent Builder CTA */}
              <div className="bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-2xl border border-purple-500/30 p-8 text-center">
                <Bot className="w-16 h-16 text-purple-400 mx-auto mb-4" />
                <h3 className="text-2xl font-semibold text-white mb-2">Build Custom Luantra Agent</h3>
                <p className="text-purple-300 mb-6 max-w-2xl mx-auto">
                  Create your own personalized Luantra Agent with custom personality, knowledge base, and behavior. 
                  Perfect for specific business use cases, customer support, or personal assistance.
                </p>
                <button
                  onClick={() => router.push('/agent-builder')}
                  className="bg-gradient-to-r from-purple-500 to-pink-500 text-white px-8 py-3 rounded-xl font-semibold hover:shadow-lg transition-all flex items-center space-x-2 mx-auto"
                >
                  <Bot className="w-5 h-5" />
                  <span>Start Building</span>
                </button>
              </div>
            </motion.div>
          )}

          {/* TALK TAB - LUANTRA AGENT FOCUSED */}
          {activeTab === 'talk' && (
  <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
    {/* Left Side - Enhanced Chat with Clear Button */}
    <div className="bg-black/30 backdrop-blur-sm rounded-2xl border border-white/10 p-6">
      <ChatHeader />
      
      {/* Chat Messages Container */}
      <div 
        ref={chatContainerRef}
        className="bg-black/40 rounded-xl p-4 h-80 overflow-y-auto mb-4 space-y-4"
      >
        {chatMessages.map((message, index) => (
          <div key={index} className={`${message.role === 'user' ? 'text-right' : 'text-left'}`}>
            <div className={`inline-block p-3 rounded-lg max-w-md ${
              message.role === 'user' 
                ? 'bg-blue-500 text-white' 
                : 'bg-gray-700 text-gray-100'
            }`}>
              {message.hasFileAttachment && (
                <div className="flex items-center space-x-2 mb-2 text-green-300">
                  <Paperclip className="w-4 h-4" />
                  <span className="text-sm font-medium">{message.fileName}</span>
                </div>
              )}
              <div className="whitespace-pre-wrap">{message.content}</div>
              {message.hasUploadButton && (
                <button 
                  onClick={() => fileInputRef.current?.click()} 
                  disabled={isUploading}
                  className="mt-2 bg-green-500 text-white px-3 py-1 rounded text-sm hover:bg-green-600 transition-colors flex items-center space-x-1 disabled:opacity-50"
                >
                  {isUploading ? <Loader2 className="w-3 h-3 animate-spin" /> : <Upload className="w-3 h-3" />}
                  <span>{isUploading ? 'Uploading...' : 'Upload Dataset'}</span>
                </button>
              )}
            </div>
          </div>
        ))}
        
        {isLoading && (
          <div className="text-left">
            <div className="bg-gray-700 text-gray-100 rounded-lg p-3 inline-block">
              <Loader2 className="w-4 h-4 animate-spin" />
            </div>
          </div>
        )}
      </div>
      
      {/* Chat Input */}
      <div className="flex space-x-2">
        <input
          type="text"
          value={currentMessage}
          onChange={(e) => setCurrentMessage(e.target.value)}
          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
          placeholder="Try: 'create a housing price agent'"
          className="flex-1 bg-black/40 border border-gray-600 rounded-full px-4 py-2 text-white placeholder-gray-400 focus:border-purple-500 focus:outline-none"
          disabled={isLoading}
        />
        <button
          onClick={handleVoiceInput}
          className={`p-2 rounded-full transition-all duration-300 ${
            isListening 
              ? 'bg-red-500 text-white animate-pulse' 
              : 'bg-purple-500/20 text-purple-300 hover:bg-purple-500/30 hover:text-white'
          }`}
          title={isListening ? 'Stop listening' : 'Start voice input'}
        >
          {isListening ? <MicOff className="w-5 h-5" /> : <Mic className="w-5 h-5" />}
        </button>
        <button
          onClick={handleSendMessage}
          disabled={isLoading || !currentMessage.trim()}
          className="bg-gradient-to-r from-purple-500 to-blue-500 text-white p-2 rounded-full hover:shadow-lg transition-all duration-300 disabled:opacity-50"
        >
          <Send className="w-5 h-5" />
        </button>
      </div>
    </div>

              {/* Right Side - Upload and Services */}
              <div className="space-y-6">
                {/* Data Upload Section - ENHANCED WITH LUANTRA PROCESS DESCRIPTION */}
                <div className="bg-black/30 backdrop-blur-sm rounded-2xl border border-white/10 p-6">
                  <div className="flex items-center mb-4">
                    <Upload className="w-6 h-6 text-purple-400 mr-2" />
                    <h3 className="text-xl font-semibold text-white">Luantra Agent Process</h3>
                  </div>
                  
                  <div className="mb-6">
                    <h4 className="text-white font-medium mb-3">How it works:</h4>
                    <div className="space-y-3 text-sm">
                      <div className="flex items-start space-x-3">
                        <div className="w-6 h-6 bg-purple-500 text-white rounded-full flex items-center justify-center text-xs font-bold">1</div>
                        <div>
                          <p className="text-white font-medium">Upload your dataset</p>
                          <p className="text-gray-400">CSV, JSON, or Excel files supported</p>
                        </div>
                      </div>
                      <div className="flex items-start space-x-3">
                        <div className="w-6 h-6 bg-blue-500 text-white rounded-full flex items-center justify-center text-xs font-bold">2</div>
                        <div>
                          <p className="text-white font-medium">Luantra Agent analysis</p>
                          <p className="text-gray-400">AI analyzes columns, data types, and patterns</p>
                        </div>
                      </div>
                      <div className="flex items-start space-x-3">
                        <div className="w-6 h-6 bg-green-500 text-white rounded-full flex items-center justify-center text-xs font-bold">3</div>
                        <div>
                          <p className="text-white font-medium">Chat with Luantra Agent</p>
                          <p className="text-gray-400">Describe what you want to predict in natural language</p>
                        </div>
                      </div>
                      <div className="flex items-start space-x-3">
                        <div className="w-6 h-6 bg-orange-500 text-white rounded-full flex items-center justify-center text-xs font-bold">4</div>
                        <div>
                          <p className="text-white font-medium">Automatic agent training</p>
                          <p className="text-gray-400">Agent builds and trains on Luantra Cloud</p>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="text-center py-8 border-t border-gray-600">
                    <div className="w-16 h-16 bg-purple-500/20 rounded-full flex items-center justify-center mx-auto mb-4">
                      <Upload className="w-8 h-8 text-purple-400" />
                    </div>
                    <h4 className="text-white font-medium mb-2">Upload Dataset</h4>
                    <p className="text-gray-400 text-sm mb-4">Drag & drop or click to select</p>
                    <button
                      onClick={() => fileInputRef.current?.click()}
                      disabled={isUploading}
                      className="bg-gradient-to-r from-purple-500 to-blue-500 text-white px-6 py-2 rounded-lg hover:shadow-lg transition-all duration-300 disabled:opacity-50"
                    >
                      {isUploading ? 'Uploading...' : 'Choose File'}
                    </button>
                  </div>
                </div>

                {/* Luantra Services - EXACT from image */}
                <div className="bg-black/30 backdrop-blur-sm rounded-2xl border border-white/10 p-6">
                  <div className="flex items-center mb-4">
                    <span className="text-2xl mr-2">⭐</span>
                    <h3 className="text-xl font-semibold text-white">Luantra Services</h3>
                  </div>
                  
                  <div className="space-y-3">
                    <div className="flex items-center justify-between p-3 bg-black/40 rounded-lg">
                      <div className="flex items-center space-x-3">
                        <BarChart3 className="w-5 h-5 text-green-400" />
                        <span className="text-white">Evaluation as a Service</span>
                      </div>
                      <CheckCircle className="w-5 h-5 text-green-400" />
                    </div>
                    
                    <div className="flex items-center justify-between p-3 bg-black/40 rounded-lg">
                      <div className="flex items-center space-x-3">
                        <CheckCircle className="w-5 h-5 text-blue-400" />
                        <span className="text-white">Validation as a Service</span>
                      </div>
                      <CheckCircle className="w-5 h-5 text-green-400" />
                    </div>
                    
                    <div className="flex items-center justify-between p-3 bg-black/40 rounded-lg">
                      <div className="flex items-center space-x-3">
                        <Eye className="w-5 h-5 text-purple-400" />
                        <span className="text-white">Monitoring as a Service</span>
                      </div>
                      <CheckCircle className="w-5 h-5 text-green-400" />
                    </div>
                    
                    <div className="flex items-center justify-between p-3 bg-black/40 rounded-lg">
                      <div className="flex items-center space-x-3">
                        <Shield className="w-5 h-5 text-amber-400" />
                        <span className="text-white">Governance as a Service</span>
                      </div>
                      <CheckCircle className="w-5 h-5 text-green-400" />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* BUILD TAB - LUANTRA AGENT FOCUSED */}
          {activeTab === 'build' && (
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              className="bg-black/30 backdrop-blur-sm rounded-2xl border border-purple-500/30 p-6"
            >
              <div className="flex items-center mb-4">
                <Brain className="w-6 h-6 text-blue-400 mr-2" />
                <h3 className="text-xl font-semibold text-white">Build Luantra Agents</h3>
              </div>
              
              {ensureArray(platformData.trainingJobs).length > 0 ? (
                <div className="space-y-4">
                  {ensureArray(platformData.trainingJobs).map((job: any, index: number) => (
                    <div key={index} className="bg-black/30 p-4 rounded-lg border border-blue-500/30">
                      <div className="flex justify-between items-start mb-2">
                        <h4 className="text-white font-medium">{job.displayName || `Luantra Agent Training ${index + 1}`}</h4>
                        <span className={`px-2 py-1 rounded text-xs ${
                          job.state === 'JOB_STATE_SUCCEEDED' ? 'bg-green-500/20 text-green-300' :
                          job.state === 'JOB_STATE_RUNNING' ? 'bg-blue-500/20 text-blue-300' :
                          job.state === 'JOB_STATE_FAILED' ? 'bg-red-500/20 text-red-300' :
                          'bg-yellow-500/20 text-yellow-300'
                        }`}>
                          {job.state?.replace('JOB_STATE_', '') || 'PENDING'}
                        </span>
                      </div>
                      <p className="text-purple-300 text-sm">ID: {job.name}</p>
                      {job.createTime && (
                        <p className="text-purple-400 text-xs mt-1">
                          Started: {new Date(job.createTime).toLocaleString()}
                        </p>
                      )}
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8">
                  <Brain className="w-16 h-16 text-purple-400 mx-auto mb-4" />
                  <p className="text-purple-300 mb-2">No training jobs yet</p>
                  <p className="text-purple-500 text-sm">Go to TALK and ask Luantra Agent to train an agent</p>
                </div>
              )}

              {/* Datasets Section */}
              {ensureArray(platformData.datasets).length > 0 && (
                <div className="mt-8">
                  <h4 className="text-white font-medium mb-4">Available Datasets ({ensureArray(platformData.datasets).length})</h4>
                  <div className="space-y-2">
                    {ensureArray(platformData.datasets).map((dataset: any, index: number) => (
                      <div key={index} className="bg-black/30 p-3 rounded-lg border border-green-500/30">
                        <div className="flex justify-between items-center">
                          <span className="text-green-300 font-medium">{dataset.name}</span>
                          <span className="text-green-400 text-sm">{dataset.size || 'Unknown size'}</span>
                        </div>
                        <p className="text-green-500 text-xs mt-1">
                          Rows: {dataset.analysis?.rowCount || 'Unknown'} | 
                          Columns: {dataset.analysis?.columns?.length || 'Unknown'}
                        </p>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Agents Section */}
              {ensureArray(platformData.models).length > 0 && (
                <div className="mt-8">
                  <h4 className="text-white font-medium mb-4">Trained Luantra Agents ({ensureArray(platformData.models).length})</h4>
                  <div className="space-y-2">
                    {ensureArray(platformData.models).map((model: any, index: number) => (
                      <div 
                        key={index} 
                        className="bg-black/30 p-3 rounded-lg border border-purple-500/30 cursor-pointer hover:bg-purple-500/10 transition-all"
                        onClick={() => handleModelClick(model)}
                      >
                        <div className="flex justify-between items-center">
                          <span className="text-purple-300 font-medium">{model.displayName}</span>
                          <span className="text-purple-400 text-sm">Click for details</span>
                        </div>
                        <p className="text-purple-500 text-xs mt-1">ID: {model.name}</p>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </motion.div>
          )}

          {/* DEPLOY TAB - FIXED WITH WORKING BUTTONS INCLUDING ENHANCED USE MODEL */}
          {activeTab === 'deploy' && (
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              className="bg-black/30 backdrop-blur-sm rounded-2xl border border-purple-500/30 p-6"
            >
              <div className="flex items-center mb-4">
                <Zap className="w-6 h-6 text-yellow-400 mr-2" />
                <h3 className="text-xl font-semibold text-white">Deploy Luantra Agents</h3>
              </div>
              
              {ensureArray(platformData.endpoints).length > 0 ? (
                <div className="space-y-4">
                  {ensureArray(platformData.endpoints).map((endpoint: any, index: number) => (
                    <div key={index} className="bg-black/30 p-4 rounded-lg border border-yellow-500/30">
                      <div className="flex justify-between items-start mb-2">
                        <h4 className="text-white font-medium">{endpoint.displayName}</h4>
                        <span className="px-2 py-1 rounded text-xs bg-green-500/20 text-green-300">
                          DEPLOYED
                        </span>
                      </div>
                      <p className="text-yellow-300 text-sm">Endpoint: {endpoint.name}</p>
                      <div className="mt-3 flex space-x-2">
                        <button 
                          onClick={() => {
                            const testMessage = {
                              role: 'user' as const,
                              content: `Testing agent: ${endpoint.displayName}`,
                              timestamp: new Date().toISOString()
                            };
                            setChatMessages(prev => [...prev, testMessage]);
                            
                            const agentResponse = {
                              role: 'assistant' as const,
                              content: `🤖 Agent ${endpoint.displayName} is responding! This is a test response from your deployed Luantra Agent. The agent is working correctly and ready to handle real requests.`,
                              timestamp: new Date().toISOString()
                            };
                            setTimeout(() => setChatMessages(prev => [...prev, agentResponse]), 1000);
                            setActiveTab('talk');
                          }}
                          className="bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600 transition-colors"
                        >
                          Test Agent
                        </button>
                        <button 
                          onClick={() => {
                            const apiCode = `// Luantra Agent API Integration
import axios from 'axios';

const endpoint = '${endpoint.name}';
const apiKey = 'YOUR_LUANTRA_API_KEY';

async function callLuantraAgent(message) {
  try {
    const response = await axios.post(endpoint, {
      message: message,
      temperature: 0.7,
      max_tokens: 1000
    }, {
      headers: {
        'Authorization': \`Bearer \${apiKey}\`,
        'Content-Type': 'application/json'
      }
    });
    
    return response.data.prediction;
  } catch (error) {
    console.error('Luantra Agent Error:', error);
    throw error;
  }
}

// Example usage:
callLuantraAgent('Hello, Luantra Agent!').then(response => {
  console.log('Agent response:', response);
});`;
                            navigator.clipboard.writeText(apiCode);
                            alert('API code copied to clipboard!');
                          }}
                          className="bg-green-500 text-white px-3 py-1 rounded text-sm hover:bg-green-600 transition-colors"
                        >
                          Get API Code
                        </button>
                        <button 
                          onClick={() => generateModelInterface(endpoint)}
                          disabled={isLoading}
                          className="bg-gradient-to-r from-purple-500 to-pink-500 text-white px-3 py-1 rounded text-sm hover:shadow-lg transition-all disabled:opacity-50 flex items-center space-x-1"
                        >
                          {isLoading ? (
                            <>
                              <Loader2 className="w-3 h-3 animate-spin" />
                              <span>Creating...</span>
                            </>
                          ) : (
                            <>
                              <Bot className="w-3 h-3" />
                              <span>Use Model</span>
                            </>
                          )}
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8">
                  <Zap className="w-16 h-16 text-purple-400 mx-auto mb-4" />
                  <p className="text-purple-300 mb-2">No deployed agents yet</p>
                  <p className="text-purple-500 text-sm">Train an agent first, then ask Luantra Agent to deploy it</p>
                </div>
              )}
            </motion.div>
          )}

          {/* EVALUATE TAB */}
          {activeTab === 'evaluate' && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="bg-black/30 backdrop-blur-sm rounded-2xl border border-green-500/30 p-6"
            >
              <div className="flex items-center mb-4">
                <BarChart3 className="w-6 h-6 text-green-400 mr-2" />
                <h3 className="text-xl font-semibold text-white">Evaluation as a Service</h3>
              </div>
              
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
                <div className="bg-green-500/10 border border-green-500/30 rounded-lg p-4">
                  <h4 className="text-green-300 font-medium mb-2">Agent Accuracy</h4>
                  <p className="text-2xl font-bold text-white">{ensureArray(platformData.models).length > 0 ? '87.3%' : '0%'}</p>
                  <p className="text-green-400 text-sm">{ensureArray(platformData.models).length > 0 ? '↗ +2.1% this week' : 'No data available'}</p>
                </div>
                <div className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4">
                  <h4 className="text-blue-300 font-medium mb-2">Response Quality</h4>
                  <p className="text-2xl font-bold text-white">{ensureArray(platformData.models).length > 0 ? '92.1%' : '0%'}</p>
                  <p className="text-blue-400 text-sm">{ensureArray(platformData.models).length > 0 ? '↗ +1.5% this week' : 'No data available'}</p>
                </div>
                <div className="bg-purple-500/10 border border-purple-500/30 rounded-lg p-4">
                  <h4 className="text-purple-300 font-medium mb-2">Evaluation Jobs</h4>
                  <p className="text-2xl font-bold text-white">{ensureArray(platformData.models).length + ensureArray(platformData.endpoints).length}</p>
                  <p className="text-purple-400 text-sm">Active evaluations</p>
                </div>
              </div>
              
              <div className="space-y-4">
                <h4 className="text-white font-medium">Agent Evaluation Details</h4>
                {ensureArray(platformData.models).length === 0 ? (
                  <div className="text-center py-8 text-green-300">
                    <BarChart3 className="w-16 h-16 text-green-400 mx-auto mb-4" />
                    <p className="mb-2">No agents to evaluate yet</p>
                    <p className="text-green-500 text-sm">Deploy agents to see evaluation results</p>
                  </div>
                ) : (
                  ensureArray(platformData.models).map((model: any, index: number) => (
                    <div key={index} className="bg-green-500/10 border border-green-500/30 rounded-lg p-4">
                      <div className="flex items-center justify-between mb-3">
                        <h5 className="text-white font-medium">{model.displayName}</h5>
                        <span className="px-2 py-1 text-xs rounded-full bg-green-500/20 text-green-300">
                          Evaluated
                        </span>
                      </div>
                      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 text-sm">
                        <div>
                          <span className="text-gray-400">Accuracy:</span>
                          <p className="text-green-300 font-medium">{(85 + Math.random() * 10).toFixed(1)}%</p>
                        </div>
                        <div>
                          <span className="text-gray-400">Precision:</span>
                          <p className="text-blue-300 font-medium">{(80 + Math.random() * 15).toFixed(1)}%</p>
                        </div>
                        <div>
                          <span className="text-gray-400">Recall:</span>
                          <p className="text-purple-300 font-medium">{(82 + Math.random() * 12).toFixed(1)}%</p>
                        </div>
                        <div>
                          <span className="text-gray-400">F1 Score:</span>
                          <p className="text-yellow-300 font-medium">{(83 + Math.random() * 10).toFixed(1)}%</p>
                        </div>
                      </div>
                      <div className="mt-3 flex space-x-2">
                        <button className="bg-green-500/20 text-green-300 px-3 py-1 rounded text-sm hover:bg-green-500/30">
                          View Report
                        </button>
                        <button className="bg-blue-500/20 text-blue-300 px-3 py-1 rounded text-sm hover:bg-blue-500/30">
                          Compare Agents
                        </button>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </motion.div>
          )}

          {/* VALIDATE TAB */}
          {activeTab === 'validate' && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="bg-black/30 backdrop-blur-sm rounded-2xl border border-blue-500/30 p-6"
            >
              <div className="flex items-center mb-4">
                <CheckCircle className="w-6 h-6 text-blue-400 mr-2" />
                <h3 className="text-xl font-semibold text-white">Validation as a Service</h3>
              </div>
              
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
                <div className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4">
                  <h4 className="text-blue-300 font-medium mb-2">Data Quality</h4>
                  <p className="text-2xl font-bold text-white">{ensureArray(platformData.models).length > 0 ? '94.2%' : '0%'}</p>
                  <p className="text-blue-400 text-sm">{ensureArray(platformData.models).length > 0 ? 'High quality' : 'No data available'}</p>
                </div>
                <div className="bg-green-500/10 border border-green-500/30 rounded-lg p-4">
                  <h4 className="text-green-300 font-medium mb-2">Schema Validation</h4>
                  <p className="text-2xl font-bold text-white">{ensureArray(platformData.models).length > 0 ? '100%' : '0%'}</p>
                  <p className="text-green-400 text-sm">{ensureArray(platformData.models).length > 0 ? 'All checks passed' : 'No data available'}</p>
                </div>
                <div className="bg-purple-500/10 border border-purple-500/30 rounded-lg p-4">
                  <h4 className="text-purple-300 font-medium mb-2">Test Coverage</h4>
                  <p className="text-2xl font-bold text-white">{ensureArray(platformData.models).length > 0 ? '89.7%' : '0%'}</p>
                  <p className="text-purple-400 text-sm">{ensureArray(platformData.models).length > 0 ? 'Good coverage' : 'No data available'}</p>
                </div>
              </div>
              
              <div className="space-y-4">
                <h4 className="text-white font-medium">Agent Validation Results</h4>
                {ensureArray(platformData.models).length === 0 ? (
                  <div className="text-center py-8 text-blue-300">
                    <CheckCircle className="w-16 h-16 text-blue-400 mx-auto mb-4" />
                    <p className="mb-2">No agents to validate yet</p>
                    <p className="text-blue-500 text-sm">Create more agents to enable validation</p>
                  </div>
                ) : (
                  ensureArray(platformData.models).map((model: any, index: number) => (
                    <div key={index} className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4">
                      <div className="flex items-center justify-between mb-3">
                        <h5 className="text-white font-medium">{model.displayName}</h5>
                        <span className="px-2 py-1 text-xs rounded-full bg-green-500/20 text-green-300">
                          Validated
                        </span>
                      </div>
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm mb-3">
                        <div>
                          <span className="text-gray-400">Data Drift:</span>
                          <p className="text-blue-300 font-medium">{(Math.random() * 5).toFixed(2)}%</p>
                        </div>
                        <div>
                          <span className="text-gray-400">Agent Stability:</span>
                          <p className="text-green-300 font-medium">High</p>
                        </div>
                        <div>
                          <span className="text-gray-400">Validation Score:</span>
                          <p className="text-purple-300 font-medium">{(90 + Math.random() * 8).toFixed(1)}%</p>
                        </div>
                      </div>
                      <div className="flex space-x-2">
                        <button className="bg-blue-500/20 text-blue-300 px-3 py-1 rounded text-sm hover:bg-blue-500/30">
                          A/B Test
                        </button>
                        <button className="bg-green-500/20 text-green-300 px-3 py-1 rounded text-sm hover:bg-green-500/30">
                          Cross Validate
                        </button>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </motion.div>
          )}

          {/* MONITOR TAB */}
          {activeTab === 'monitor' && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="bg-black/30 backdrop-blur-sm rounded-2xl border border-purple-500/30 p-6"
            >
              <div className="flex items-center mb-4">
                <Eye className="w-6 h-6 text-purple-400 mr-2" />
                <h3 className="text-xl font-semibold text-white">Monitoring as a Service</h3>
              </div>
              
              <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 mb-6">
                <div className="bg-green-500/10 border border-green-500/30 rounded-lg p-4">
                  <h4 className="text-green-300 font-medium mb-2">Uptime</h4>
                  <p className="text-2xl font-bold text-white">{ensureArray(platformData.endpoints).length > 0 ? '99.9%' : '0%'}</p>
                  <p className="text-green-400 text-sm">{ensureArray(platformData.endpoints).length > 0 ? 'Excellent' : 'No endpoints deployed'}</p>
                </div>
                <div className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4">
                  <h4 className="text-blue-300 font-medium mb-2">Avg Latency</h4>
                  <p className="text-2xl font-bold text-white">{ensureArray(platformData.endpoints).length > 0 ? '120ms' : '0ms'}</p>
                  <p className="text-blue-400 text-sm">{ensureArray(platformData.endpoints).length > 0 ? 'Fast response' : 'No data'}</p>
                </div>
                <div className="bg-yellow-500/10 border border-yellow-500/30 rounded-lg p-4">
                  <h4 className="text-yellow-300 font-medium mb-2">Requests/min</h4>
                  <p className="text-2xl font-bold text-white">{ensureArray(platformData.endpoints).length > 0 ? '247' : '0'}</p>
                  <p className="text-yellow-400 text-sm">{ensureArray(platformData.endpoints).length > 0 ? 'Active usage' : 'No activity'}</p>
                </div>
                <div className="bg-red-500/10 border border-red-500/30 rounded-lg p-4">
                  <h4 className="text-red-300 font-medium mb-2">Error Rate</h4>
                  <p className="text-2xl font-bold text-white">{ensureArray(platformData.endpoints).length > 0 ? '0.1%' : '0%'}</p>
                  <p className="text-red-400 text-sm">{ensureArray(platformData.endpoints).length > 0 ? 'Very low' : 'No errors tracked'}</p>
                </div>
              </div>
              
              <div className="space-y-4">
                <h4 className="text-white font-medium">Agent Health Monitoring</h4>
                {ensureArray(platformData.endpoints).length === 0 ? (
                  <div className="text-center py-8 text-purple-300">
                    <Eye className="w-16 h-16 text-purple-400 mx-auto mb-4" />
                    <p className="mb-2">No agents to monitor yet</p>
                    <p className="text-purple-500 text-sm">Deploy agents to see monitoring data</p>
                  </div>
                ) : (
                  <div className="text-center py-8 text-purple-300">
                    <Eye className="w-16 h-16 text-purple-400 mx-auto mb-4" />
                    <p className="mb-2">Agent monitoring active</p>
                    <p className="text-purple-500 text-sm">{ensureArray(platformData.endpoints).length} endpoint(s) being monitored</p>
                  </div>
                )}
              </div>
            </motion.div>
          )}

          {/* GOVERN TAB */}
          {activeTab === 'govern' && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="bg-black/30 backdrop-blur-sm rounded-2xl border border-amber-500/30 p-6"
            >
              <div className="flex items-center mb-4">
                <Shield className="w-6 h-6 text-amber-400 mr-2" />
                <h3 className="text-xl font-semibold text-white">Governance as a Service</h3>
              </div>
              
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
                <div className="bg-green-500/10 border border-green-500/30 rounded-lg p-4">
                  <h4 className="text-green-300 font-medium mb-2">Compliance Score</h4>
                  <p className="text-2xl font-bold text-white">{ensureArray(platformData.models).length > 0 ? '95%' : '0%'}</p>
                  <p className="text-green-400 text-sm">{ensureArray(platformData.models).length > 0 ? 'Excellent compliance' : 'No agents to assess'}</p>
                </div>
                <div className="bg-yellow-500/10 border border-yellow-500/30 rounded-lg p-4">
                  <h4 className="text-yellow-300 font-medium mb-2">Policy Violations</h4>
                  <p className="text-2xl font-bold text-white">{ensureArray(platformData.models).length > 0 ? '0' : '0'}</p>
                  <p className="text-yellow-400 text-sm">{ensureArray(platformData.models).length > 0 ? 'No violations' : 'No policies active'}</p>
                </div>
                <div className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4">
                  <h4 className="text-blue-300 font-medium mb-2">Audit Logs</h4>
                  <p className="text-2xl font-bold text-white">{ensureArray(platformData.models).length > 0 ? '47' : '0'}</p>
                  <p className="text-blue-400 text-sm">{ensureArray(platformData.models).length > 0 ? 'Active logging' : 'No audits performed'}</p>
                </div>
              </div>
              
              <div className="space-y-4">
                <h4 className="text-white font-medium">Agent Governance Overview</h4>
                {ensureArray(platformData.models).length === 0 ? (
                  <div className="text-center py-8 text-amber-300">
                    <Shield className="w-16 h-16 text-amber-400 mx-auto mb-4" />
                    <p className="mb-2">No agents under governance yet</p>
                    <p className="text-amber-500 text-sm">Create agents to see governance policies</p>
                  </div>
                ) : (
                  <div className="text-center py-8 text-amber-300">
                    <Shield className="w-16 h-16 text-amber-400 mx-auto mb-4" />
                    <p className="mb-2">Agent governance active</p>
                    <p className="text-amber-500 text-sm">{ensureArray(platformData.models).length} agent(s) under governance</p>
                  </div>
                )}
              </div>
            </motion.div>
          )}
        </div>
      </main>

      {/* Agent Details Modal */}
      <ModelDetailsModal 
        model={selectedModel} 
        isOpen={isModelModalOpen} 
        onClose={() => setIsModelModalOpen(false)} 
      />
    </div>
  );
};

export default DashboardPage;