'use client';

import React, { useState, useEffect, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { motion } from 'framer-motion';
import { MessageCircle, Database, Brain, Zap, Settings, Upload, BarChart3, Shield, Eye, CheckCircle, Home, Loader2, Send, Plus, FileText, Bot, Mic, MicOff, Paperclip, AlertCircle, Info, Clock, User, Globe, Server, Code, TrendingUp, X } from 'lucide-react';

// BEAUTIFUL AURORA LOGO - EXACT FROM AGENT BUILDER
const LuantraLogo = ({ className }: { className?: string }) => (
  <svg width="120" height="120" viewBox="0 0 200 200" className={className}>
    <defs>
      <radialGradient id="auroraCore" cx="50%" cy="50%" r="50%">
        <stop offset="0%" stopColor="#8b5cf6" stopOpacity="0.8" />
        <stop offset="50%" stopColor="#3b82f6" stopOpacity="0.6" />
        <stop offset="100%" stopColor="#06b6d4" stopOpacity="0.4" />
      </radialGradient>
      
      <linearGradient id="lGradient" x1="0%" y1="0%" x2="100%" y2="100%">
        <stop offset="0%" stopColor="#f59e0b" />
        <stop offset="25%" stopColor="#ef4444" />
        <stop offset="50%" stopColor="#8b5cf6" />
        <stop offset="75%" stopColor="#3b82f6" />
        <stop offset="100%" stopColor="#06b6d4" />
      </linearGradient>
    </defs>

    <circle cx="100" cy="100" r="90" fill="url(#auroraCore)" opacity="0.3">
      <animateTransform
        attributeName="transform"
        attributeType="XML"
        type="rotate"
        from="0 100 100"
        to="360 100 100"
        dur="15s"
        repeatCount="indefinite"
      />
    </circle>

    <g>
      <path
        d="M60 40 L60 140 L140 140 L140 120 L80 120 L80 40 Z"
        fill="url(#lGradient)"
        stroke="#ffffff"
        strokeWidth="2"
        opacity="0.9"
      />
      
      <circle cx="85" cy="70" r="6" fill="#10b981" opacity="1">
        <animate attributeName="opacity" values="0.5;1;0.5" dur="2s" repeatCount="indefinite" />
      </circle>
      <circle cx="110" cy="85" r="6" fill="#3b82f6" opacity="1">
        <animate attributeName="opacity" values="1;0.5;1" dur="2.5s" repeatCount="indefinite" />
      </circle>
      <circle cx="125" cy="110" r="6" fill="#8b5cf6" opacity="1">
        <animate attributeName="opacity" values="0.5;1;0.5" dur="3s" repeatCount="indefinite" />
      </circle>
    </g>
  </svg>
);

interface ChatMessage {
  role: 'user' | 'assistant';
  content: string;
  hasUploadButton?: boolean;
  hasFileAttachment?: boolean;
  fileName?: string;
  timestamp?: Date;
}

interface ConversationState {
  stage: 'initial' | 'data_uploaded' | 'target_selected' | 'training' | 'deployed';
  currentDataset?: any;
  targetColumn?: string;
  modelType?: string;
  trainingJobId?: string;
}

// Model Details Modal Component
const ModelDetailsModal = ({ model, isOpen, onClose }: { model: any; isOpen: boolean; onClose: () => void }) => {
  if (!isOpen || !model) return null;

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <motion.div
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        className="bg-black/80 backdrop-blur-md rounded-2xl border border-purple-500/30 max-w-4xl w-full max-h-[90vh] overflow-y-auto"
      >
        <div className="p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-white">Agent Details</h2>
            <button onClick={onClose} className="text-gray-400 hover:text-white">
              <X className="w-6 h-6" />
            </button>
          </div>
          
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div className="space-y-4">
              <div className="bg-purple-500/10 rounded-lg p-4">
                <h3 className="text-lg font-semibold text-white mb-3">Basic Information</h3>
                <div className="space-y-2 text-sm">
                  <div><span className="text-gray-400">Agent ID:</span> <span className="text-white">{model.name}</span></div>
                  <div><span className="text-gray-400">Display Name:</span> <span className="text-white">{model.displayName}</span></div>
                  <div><span className="text-gray-400">Agent Type:</span> <span className="text-white">Luantra AI Agent</span></div>
                  <div><span className="text-gray-400">Status:</span> <span className="text-green-400">Active</span></div>
                  <div><span className="text-gray-400">Version:</span> <span className="text-white">1.0.0</span></div>
                </div>
              </div>
              
              <div className="bg-blue-500/10 rounded-lg p-4">
                <h3 className="text-lg font-semibold text-white mb-3">Performance Metrics</h3>
                <div className="space-y-2 text-sm">
                  <div><span className="text-gray-400">Accuracy:</span> <span className="text-green-400">87.3%</span></div>
                  <div><span className="text-gray-400">Precision:</span> <span className="text-blue-400">85.1%</span></div>
                  <div><span className="text-gray-400">Recall:</span> <span className="text-purple-400">89.2%</span></div>
                  <div><span className="text-gray-400">F1 Score:</span> <span className="text-yellow-400">87.1%</span></div>
                </div>
              </div>
            </div>
            
            <div className="space-y-4">
              <div className="bg-green-500/10 rounded-lg p-4">
                <h3 className="text-lg font-semibold text-white mb-3">Training Details</h3>
                <div className="space-y-2 text-sm">
                  <div><span className="text-gray-400">Dataset Size:</span> <span className="text-white">15,420 rows</span></div>
                  <div><span className="text-gray-400">Training Time:</span> <span className="text-white">2.5 hours</span></div>
                  <div><span className="text-gray-400">Compute Used:</span> <span className="text-white">Luantra Cloud</span></div>
                  <div><span className="text-gray-400">Region:</span> <span className="text-white">us-central1</span></div>
                </div>
              </div>
              
              <div className="bg-yellow-500/10 rounded-lg p-4">
                <h3 className="text-lg font-semibold text-white mb-3">API Information</h3>
                <div className="space-y-2 text-sm">
                  <div><span className="text-gray-400">Endpoint URL:</span> <span className="text-white text-xs break-all">luantra-platform/agents/{model.name}</span></div>
                  <div><span className="text-gray-400">QPS Limit:</span> <span className="text-white">100</span></div>
                  <div><span className="text-gray-400">Latency:</span> <span className="text-white">120ms</span></div>
                </div>
              </div>
            </div>
          </div>
          
          <div className="mt-6 flex space-x-3">
            <button className="bg-gradient-to-r from-purple-500 to-blue-500 text-white px-4 py-2 rounded-lg hover:shadow-lg transition-all">
              Deploy Agent
            </button>
            <button className="bg-green-500/20 text-green-300 px-4 py-2 rounded-lg hover:bg-green-500/30 transition-all">
              Test Agent
            </button>
            <button className="bg-blue-500/20 text-blue-300 px-4 py-2 rounded-lg hover:bg-blue-500/30 transition-all">
              Download
            </button>
            <button className="bg-red-500/20 text-red-300 px-4 py-2 rounded-lg hover:bg-red-500/30 transition-all">
              Archive
            </button>
          </div>
        </div>
      </motion.div>
    </div>
  );
};

const DashboardPage = () => {
  const router = useRouter();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const chatContainerRef = useRef<HTMLDivElement>(null);
  
  // State management - ALL ORIGINAL STATES
  const [activeTab, setActiveTab] = useState<'overview' | 'talk' | 'build' | 'deploy' | 'evaluate' | 'validate' | 'monitor' | 'govern'>('overview');
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([
    {
      role: 'assistant',
      content: 'Welcome to your personal Luantra AI platform! I can help you with the complete TALK.BUILD.DEPLOY pipeline using Luantra Agents.\n\nTry saying:\n• "create a housing price agent"\n• "show me my agents"\n• "build a customer classification agent"',
      timestamp: new Date()
    }
  ]);
  const [currentMessage, setCurrentMessage] = useState("Try: 'create a housing price agent'");
  const [isLoading, setIsLoading] = useState(false);
  const [isRecording, setIsRecording] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [conversationState, setConversationState] = useState<ConversationState>({
    stage: 'initial'
  });
  
  // Platform data - ROBUST INITIALIZATION
  const [platformData, setPlatformData] = useState({
    datasets: [],
    models: [],
    trainingJobs: [],
    endpoints: []
  });

  // Model details modal
  const [selectedModel, setSelectedModel] = useState(null);
  const [isModelModalOpen, setIsModelModalOpen] = useState(false);

  // ROBUST ARRAY HELPER FUNCTION
  const ensureArray = (data: any): any[] => {
    if (Array.isArray(data)) return data;
    if (!data) return [];
    if (typeof data === 'object' && data.items && Array.isArray(data.items)) return data.items;
    return [];
  };

  // ALL ORIGINAL EFFECTS
  useEffect(() => {
    loadPlatformData();
  }, []);

  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }, [chatMessages]);

  // ROBUST PLATFORM DATA LOADING
  const loadPlatformData = async () => {
    try {
      const [datasetsRes, modelsRes, jobsRes, endpointsRes] = await Promise.all([
        fetch('http://localhost:3001/api/datasets').catch(() => ({ ok: false })),
        fetch('http://localhost:3001/api/models').catch(() => ({ ok: false })),
        fetch('http://localhost:3001/api/training-jobs').catch(() => ({ ok: false })),
        fetch('http://localhost:3001/api/endpoints').catch(() => ({ ok: false }))
      ]);

      const datasets = datasetsRes.ok ? ensureArray(await datasetsRes.json()) : [];
      const models = modelsRes.ok ? ensureArray(await modelsRes.json()) : [];
      const trainingJobs = jobsRes.ok ? ensureArray(await jobsRes.json()) : [];
      const endpoints = endpointsRes.ok ? ensureArray(await endpointsRes.json()) : [];

      setPlatformData({ 
        datasets: ensureArray(datasets), 
        models: ensureArray(models), 
        trainingJobs: ensureArray(trainingJobs), 
        endpoints: ensureArray(endpoints) 
      });
    } catch (error) {
      console.error('Error loading platform data:', error);
      // Ensure arrays even on error
      setPlatformData({
        datasets: [],
        models: [],
        trainingJobs: [],
        endpoints: []
      });
    }
  };

  // COMPLETE LUANTRA AGENT CONVERSATION SYSTEM
  const handleSendMessage = async () => {
    if (!currentMessage.trim() || isLoading) return;

    const userMessage: ChatMessage = {
      role: 'user',
      content: currentMessage,
      timestamp: new Date()
    };

    setChatMessages(prev => [...prev, userMessage]);
    setCurrentMessage('');
    setIsLoading(true);

    try {
      // Send to Luantra Agent backend for intelligent response
      const response = await fetch('http://localhost:3001/api/chat/luantra-agent', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: currentMessage,
          conversationState,
          platformData,
          sessionId: 'dashboard-session'
        })
      });

      const agentResponse = await response.json();
      
      const assistantMessage: ChatMessage = {
        role: 'assistant',
        content: agentResponse.message,
        hasUploadButton: agentResponse.actions?.includes('upload'),
        timestamp: new Date()
      };

      setChatMessages(prev => [...prev, assistantMessage]);

      // Update conversation state based on Luantra Agent's response
      if (agentResponse.newState) {
        setConversationState(agentResponse.newState);
      }

      // Handle actions from Luantra Agent
      if (agentResponse.actions) {
        for (const action of agentResponse.actions) {
          switch (action.type) {
            case 'navigate':
              if (action.tab) setActiveTab(action.tab);
              break;
            case 'start_training':
              await startLuantraAgentTraining(action.data);
              break;
            case 'deploy_agent':
              await deployAgent(action.modelId);
              break;
          }
        }
      }

    } catch (error) {
      // Simple fallback responses when backend isn't available
      let response = 'I can help you with that! ';
      
      if (currentMessage.toLowerCase().includes('upload') || currentMessage.toLowerCase().includes('dataset')) {
        response = 'Great! Please upload your dataset and I\'ll analyze it for you using Luantra Agent technology.';
        setTimeout(() => {
          setChatMessages(prev => [...prev, {
            role: 'assistant',
            content: response,
            hasUploadButton: true,
            timestamp: new Date()
          }]);
        }, 500);
      } else if (currentMessage.toLowerCase().includes('model') || currentMessage.toLowerCase().includes('agent') || currentMessage.toLowerCase().includes('housing') || currentMessage.toLowerCase().includes('price')) {
        response = 'Perfect! I can help you create a housing price prediction agent. First, please upload your housing dataset with features like bedrooms, bathrooms, square footage, and prices.';
        setTimeout(() => {
          setChatMessages(prev => [...prev, {
            role: 'assistant',
            content: response,
            hasUploadButton: true,
            timestamp: new Date()
          }]);
        }, 500);
      } else {
        response = 'I\'m here to help you with the TALK.BUILD.DEPLOY workflow using Luantra Agents. Try asking me to create an agent or upload a dataset!';
        setTimeout(() => {
          setChatMessages(prev => [...prev, {
            role: 'assistant',
            content: response,
            timestamp: new Date()
          }]);
        }, 500);
      }
    } finally {
      setIsLoading(false);
    }
  };

  // FIXED FILE UPLOAD FUNCTION - ONLY CHANGE
  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setIsUploading(true);
    
    const uploadMessage: ChatMessage = {
      role: 'user',
      content: `Uploading dataset: ${file.name}`,
      hasFileAttachment: true,
      fileName: file.name,
      timestamp: new Date()
    };
    setChatMessages(prev => [...prev, uploadMessage]);

    try {
      // Show processing message immediately
      const processingMessage: ChatMessage = {
        role: 'assistant',
        content: 'Processing your dataset... This may take a moment.',
        timestamp: new Date()
      };
      setChatMessages(prev => [...prev, processingMessage]);

      const formData = new FormData();
      formData.append('file', file);

      const response = await fetch('http://localhost:3001/api/upload', {
        method: 'POST',
        body: formData
      });

      const result = await response.json();

      if (response.ok && result.analysis) {
        // Success with detailed analysis
        const analysis = result.analysis;
        const analysisMessage: ChatMessage = {
          role: 'assistant',
          content: `✅ Dataset analyzed successfully!\n\n📊 **${file.name}**\n• Rows: ${analysis.rowCount || 'Unknown'}\n• Total Rows: ${analysis.totalRows || 'Unknown'}\n• Columns: ${analysis.columns?.length || 'Unknown'}\n• Key columns: ${analysis.columns?.slice(0, 5).join(', ') || 'None'}\n\n${analysis.suggestedTargets?.length > 0 ? `🎯 **Suggested target columns**: ${analysis.suggestedTargets.join(', ')}\n\n` : ''}What type of agent would you like to create?\n• "predict ${analysis.suggestedTargets?.[0] || 'values'}" - Regression model\n• "classify ${analysis.columns?.find(c => c.toLowerCase().includes('category') || c.toLowerCase().includes('type')) || 'items'}" - Classification model\n• "create custom agent" - Custom AI assistant`,
          timestamp: new Date()
        };
        setChatMessages(prev => [...prev, analysisMessage]);

        setConversationState({
          ...conversationState,
          stage: 'data_uploaded',
          currentDataset: result
        });

        await loadPlatformData();
      } else {
        throw new Error(result.error || 'Upload failed - no analysis returned');
      }
    } catch (error) {
      console.error('Upload error:', error);
      const errorMessage: ChatMessage = {
        role: 'assistant',
        content: `❌ Upload failed: ${error instanceof Error ? error.message : 'Unknown error'}\n\nPlease check:\n• Backend is running on port 3001\n• File is CSV, JSON, or Excel format\n• File size is under 100MB\n• Network connection is stable\n\nTry uploading a different file or restart the backend.`,
        timestamp: new Date()
      };
      setChatMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsUploading(false);
    }
  };

  // Voice input simulation
  const handleVoiceInput = () => {
    setIsRecording(!isRecording);
    
    if (!isRecording) {
      setTimeout(() => {
        setIsRecording(false);
        setCurrentMessage("Create a housing price prediction agent");
      }, 2000);
    }
  };

  // Start Luantra Agent training
  const startLuantraAgentTraining = async (trainingData: any) => {
    try {
      const response = await fetch('http://localhost:3001/api/agents/train', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(trainingData)
      });

      const result = await response.json();
      
      const trainingMessage: ChatMessage = {
        role: 'assistant',
        content: `Great! I've started training your Luantra Agent. Job ID: ${result.jobId}. You can monitor progress in the BUILD tab.`,
        timestamp: new Date()
      };
      setChatMessages(prev => [...prev, trainingMessage]);

      setConversationState({
        ...conversationState,
        stage: 'training',
        trainingJobId: result.jobId
      });

      setActiveTab('build');
      
    } catch (error) {
      const errorMessage: ChatMessage = {
        role: 'assistant',
        content: 'I encountered an issue starting the agent training. Let me check the backend connection.',
        timestamp: new Date()
      };
      setChatMessages(prev => [...prev, errorMessage]);
    }
  };

  // Deploy agent
  const deployAgent = async (modelId: string) => {
    try {
      const response = await fetch('http://localhost:3001/api/agents/deploy', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ modelId })
      });

      const result = await response.json();
      
      const deployMessage: ChatMessage = {
        role: 'assistant',
        content: `Perfect! Your Luantra Agent is now deployed and ready for use. You can test it in the DEPLOY tab.`,
        timestamp: new Date()
      };
      setChatMessages(prev => [...prev, deployMessage]);

      setConversationState({
        ...conversationState,
        stage: 'deployed'
      });

      setActiveTab('deploy');
      
    } catch (error) {
      const errorMessage: ChatMessage = {
        role: 'assistant',
        content: 'I had trouble deploying the agent. Let me check the status.',
        timestamp: new Date()
      };
      setChatMessages(prev => [...prev, errorMessage]);
    }
  };

  // Model click handler
  const handleModelClick = (model: any) => {
    setSelectedModel(model);
    setIsModelModalOpen(true);
  };

  // Logout handler
  const handleLogout = () => {
    localStorage.removeItem('luantra_user');
    sessionStorage.clear();
    router.push('/auth/login');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 relative overflow-hidden">
      {/* Aurora background effects - EXACT from agent builder */}
      <div className="absolute inset-0 opacity-30">
        <div className="absolute top-0 left-1/4 w-96 h-96 bg-blue-500 rounded-full mix-blend-multiply filter blur-xl animate-pulse"></div>
        <div className="absolute top-0 right-1/4 w-96 h-96 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl animate-pulse animation-delay-2000"></div>
        <div className="absolute bottom-0 left-1/3 w-96 h-96 bg-pink-500 rounded-full mix-blend-multiply filter blur-xl animate-pulse animation-delay-4000"></div>
      </div>
      {/* Hidden file input */}
      <input
        type="file"
        ref={fileInputRef}
        onChange={handleFileSelect}
        accept=".csv,.json,.xlsx,.xls"
        className="hidden"
      />

      {/* Header - EXACT styling from agent builder */}
      <header className="relative z-10 p-6 border-b border-purple-500/20 backdrop-blur-sm">
        <div className="max-w-7xl mx-auto flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <LuantraLogo className="w-12 h-12" />
            <div>
              <h1 className="text-2xl font-bold bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 bg-clip-text text-transparent">
                Luantra
              </h1>
              <p className="text-purple-300 text-sm">Welcome, lucas.zarzeczny@gmail.com</p>
            </div>
          </div>
          
          <div className="flex items-center space-x-4">
            {/* ALL 8 TABS */}
            {(['overview', 'talk', 'build', 'deploy', 'evaluate', 'validate', 'monitor', 'govern'] as const).map((tab) => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                className={`px-4 py-2 rounded-full font-medium transition-all ${
                  activeTab === tab
                    ? 'bg-purple-500 text-white'
                    : 'text-gray-300 hover:text-white'
                }`}
              >
                {tab.toUpperCase()}
              </button>
            ))}
            
            <button
              onClick={() => router.push('/agent-builder')}
              className="bg-gradient-to-r from-purple-500 to-pink-500 text-white px-4 py-2 rounded-lg hover:shadow-lg transition-all duration-300 flex items-center space-x-2"
            >
              <Bot className="w-4 h-4" />
              <span>Agent Builder</span>
            </button>
            
            <button
              onClick={handleLogout}
              className="text-gray-300 hover:text-white flex items-center space-x-1"
            >
              <span>Logout</span>
            </button>
          </div>
        </div>
      </header>

      {/* Main Content - Centered with relative z-index */}
      <main className="relative z-10 max-w-7xl mx-auto p-6">
        {/* COLORFUL TALK.BUILD.DEPLOY Title */}
        <div className="text-center mb-8">
          <h1 className="text-6xl font-bold flex items-center justify-center space-x-4">
            <span className="bg-gradient-to-r from-cyan-400 to-cyan-300 bg-clip-text text-transparent animate-pulse">TALK</span>
            <span className="text-white">•</span>
            <span className="bg-gradient-to-r from-purple-400 to-purple-300 bg-clip-text text-transparent animate-pulse animation-delay-1000">BUILD</span>
            <span className="text-white">•</span>
            <span className="bg-gradient-to-r from-orange-400 to-orange-300 bg-clip-text text-transparent animate-pulse animation-delay-2000">DEPLOY</span>
          </h1>
          <p className="text-gray-300 text-xl mt-2">Your Personal Luantra Agent Platform for End-to-End AI Operations</p>
          <div className="mt-4 text-center">
            <p className="text-purple-200 text-lg max-w-4xl mx-auto">
              Upload your data, chat with Luantra Agent to define your requirements, and watch as we automatically build, train, and deploy production-ready AI agents on Luantra Cloud. Complete with evaluation, validation, monitoring, and governance services.
            </p>
          </div>
        </div>

        {/* Tab Content */}
        <div className="space-y-8">
          {/* OVERVIEW TAB - ENHANCED WITH LUANTRA AGENT DESCRIPTION */}
          {activeTab === 'overview' && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="space-y-6"
            >
              {/* Platform Description */}
              <div className="bg-black/30 backdrop-blur-sm rounded-2xl p-8 border border-purple-500/30 text-center">
                <h2 className="text-3xl font-bold text-white mb-4">Welcome to Luantra Agent Platform</h2>
                <p className="text-purple-200 text-lg mb-6 max-w-4xl mx-auto">
                  The only platform where you can <span className="text-cyan-400 font-bold">TALK</span> with Luantra Agent to describe what you want, 
                  automatically <span className="text-purple-400 font-bold">BUILD</span> and train agents on Luantra Cloud, 
                  and seamlessly <span className="text-orange-400 font-bold">DEPLOY</span> them for production use.
                </p>
                
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-8">
                  <div className="bg-cyan-500/10 border border-cyan-500/30 rounded-xl p-6">
                    <MessageCircle className="w-10 h-10 text-cyan-400 mx-auto mb-4" />
                    <h3 className="text-xl font-bold text-cyan-300 mb-2">TALK</h3>
                    <p className="text-gray-300 text-sm">
                      Chat with Luantra Agent to describe your requirements. Upload your dataset and explain what you want to predict. 
                      Our AI understands natural language and guides you through the entire process.
                    </p>
                  </div>
                  
                  <div className="bg-purple-500/10 border border-purple-500/30 rounded-xl p-6">
                    <Brain className="w-10 h-10 text-purple-400 mx-auto mb-4" />
                    <h3 className="text-xl font-bold text-purple-300 mb-2">BUILD</h3>
                    <p className="text-gray-300 text-sm">
                      Watch as we automatically configure, train, and optimize your agents using Luantra Cloud infrastructure. 
                      Real training jobs, real compute resources, real machine learning at scale.
                    </p>
                  </div>
                  
                  <div className="bg-orange-500/10 border border-orange-500/30 rounded-xl p-6">
                    <Zap className="w-10 h-10 text-orange-400 mx-auto mb-4" />
                    <h3 className="text-xl font-bold text-orange-300 mb-2">DEPLOY</h3>
                    <p className="text-gray-300 text-sm">
                      Deploy your trained agents to production endpoints with monitoring, validation, and governance. 
                      Get API access, performance metrics, and enterprise-grade reliability.
                    </p>
                  </div>
                </div>
              </div>

              {/* Platform Statistics - ENHANCED */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <div className="bg-black/30 backdrop-blur-sm rounded-xl p-4 border border-purple-500/30">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-purple-300 text-sm">Datasets Uploaded</p>
                      <p className="text-2xl font-bold text-white">{ensureArray(platformData.datasets).length}</p>
                      <p className="text-purple-400 text-xs mt-1">Ready for training</p>
                    </div>
                    <Database className="w-8 h-8 text-purple-400" />
                  </div>
                </div>
                
                <div className="bg-black/30 backdrop-blur-sm rounded-xl p-4 border border-blue-500/30">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-blue-300 text-sm">AI Agents Created</p>
                      <p className="text-2xl font-bold text-white">{ensureArray(platformData.models).length}</p>
                      <p className="text-blue-400 text-xs mt-1">Production ready</p>
                    </div>
                    <Brain className="w-8 h-8 text-blue-400" />
                  </div>
                </div>
                
                <div className="bg-black/30 backdrop-blur-sm rounded-xl p-4 border border-green-500/30">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-green-300 text-sm">Training Jobs</p>
                      <p className="text-2xl font-bold text-white">{ensureArray(platformData.trainingJobs).length}</p>
                      <p className="text-green-400 text-xs mt-1">Luantra powered</p>
                    </div>
                    <Settings className="w-8 h-8 text-green-400" />
                  </div>
                </div>
                
                <div className="bg-black/30 backdrop-blur-sm rounded-xl p-4 border border-yellow-500/30">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-yellow-300 text-sm">Live Endpoints</p>
                      <p className="text-2xl font-bold text-white">{ensureArray(platformData.endpoints).length}</p>
                      <p className="text-yellow-400 text-xs mt-1">Serving predictions</p>
                    </div>
                    <Zap className="w-8 h-8 text-yellow-400" />
                  </div>
                </div>
              </div>

              {/* Quick Start Actions */}
              <div className="bg-black/30 backdrop-blur-sm rounded-2xl p-6 border border-purple-500/30">
                <h3 className="text-xl font-semibold text-white mb-4">Quick Start</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <button
                    onClick={() => setActiveTab('talk')}
                    className="bg-gradient-to-r from-purple-500 to-blue-500 text-white p-4 rounded-lg hover:shadow-lg transition-all duration-300"
                  >
                    <MessageCircle className="w-6 h-6 mb-2" />
                    <p className="font-medium">Start Conversation</p>
                    <p className="text-sm opacity-80">Talk with Luantra Agent</p>
                  </button>
                  
                  <button
                    onClick={() => router.push('/agent-builder')}
                    className="bg-gradient-to-r from-green-500 to-blue-500 text-white p-4 rounded-lg hover:shadow-lg transition-all duration-300"
                  >
                    <Bot className="w-6 h-6 mb-2" />
                    <p className="font-medium">Build Agent</p>
                    <p className="text-sm opacity-80">Create custom AI</p>
                  </button>
                  
                  <button
                    onClick={() => setActiveTab('deploy')}
                    className="bg-gradient-to-r from-yellow-500 to-red-500 text-white p-4 rounded-lg hover:shadow-lg transition-all duration-300"
                  >
                    <Zap className="w-6 h-6 mb-2" />
                    <p className="font-medium">Deploy Agent</p>
                    <p className="text-sm opacity-80">Go live with AI</p>
                  </button>
                </div>
              </div>

              {/* Service Status Grid */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <div className="bg-green-500/10 border border-green-500/30 rounded-lg p-4 text-center">
                  <BarChart3 className="w-6 h-6 text-green-400 mx-auto mb-2" />
                  <h4 className="text-green-300 font-medium">Evaluation as a Service</h4>
                  <p className="text-green-400 text-sm">Performance tracking</p>
                </div>
                <div className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4 text-center">
                  <CheckCircle className="w-6 h-6 text-blue-400 mx-auto mb-2" />
                  <h4 className="text-blue-300 font-medium">Validation as a Service</h4>
                  <p className="text-blue-400 text-sm">Quality assurance</p>
                </div>
                <div className="bg-purple-500/10 border border-purple-500/30 rounded-lg p-4 text-center">
                  <Eye className="w-6 h-6 text-purple-400 mx-auto mb-2" />
                  <h4 className="text-purple-300 font-medium">Monitoring as a Service</h4>
                  <p className="text-purple-400 text-sm">Real-time insights</p>
                </div>
                <div className="bg-amber-500/10 border border-amber-500/30 rounded-lg p-4 text-center">
                  <Shield className="w-6 h-6 text-amber-400 mx-auto mb-2" />
                  <h4 className="text-amber-300 font-medium">Governance as a Service</h4>
                  <p className="text-amber-400 text-sm">Compliance & security</p>
                </div>
              </div>

              {/* Agent Builder CTA */}
              <div className="bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-2xl border border-purple-500/30 p-8 text-center">
                <Bot className="w-16 h-16 text-purple-400 mx-auto mb-4" />
                <h3 className="text-2xl font-semibold text-white mb-2">Build Custom Luantra Agent</h3>
                <p className="text-purple-300 mb-6 max-w-2xl mx-auto">
                  Create your own personalized Luantra Agent with custom personality, knowledge base, and behavior. 
                  Perfect for specific business use cases, customer support, or personal assistance.
                </p>
                <button
                  onClick={() => router.push('/agent-builder')}
                  className="bg-gradient-to-r from-purple-500 to-pink-500 text-white px-8 py-3 rounded-xl font-semibold hover:shadow-lg transition-all flex items-center space-x-2 mx-auto"
                >
                  <Bot className="w-5 h-5" />
                  <span>Start Building</span>
                </button>
              </div>
            </motion.div>
          )}

          {/* TALK TAB - LUANTRA AGENT FOCUSED */}
          {activeTab === 'talk' && (
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {/* Left Side - Luantra Agent Chat */}
              <div className="bg-black/30 backdrop-blur-sm rounded-2xl border border-white/10 p-6">
                <div className="flex items-center mb-4">
                  <div className="w-3 h-3 bg-green-400 rounded-full mr-3"></div>
                  <MessageCircle className="w-6 h-6 text-white mr-2" />
                  <h3 className="text-xl font-semibold text-white">Luantra Agent Assistant</h3>
                  <span className="ml-2 text-2xl">✨</span>
                </div>
                
                {/* Chat Messages Container - EXACT from image */}
                <div 
                  ref={chatContainerRef}
                  className="bg-black/40 rounded-xl p-4 h-80 overflow-y-auto mb-4 space-y-4"
                >
                  {chatMessages.map((message, index) => (
                    <div key={index} className={`${message.role === 'user' ? 'text-right' : 'text-left'}`}>
                      <div className={`inline-block p-3 rounded-lg max-w-md ${
                        message.role === 'user' 
                          ? 'bg-blue-500 text-white' 
                          : 'bg-gray-700 text-gray-100'
                      }`}>
                        {message.hasFileAttachment && (
                          <div className="flex items-center space-x-2 mb-2 text-green-300">
                            <Paperclip className="w-4 h-4" />
                            <span className="text-sm font-medium">{message.fileName}</span>
                          </div>
                        )}
                        <div className="whitespace-pre-wrap">{message.content}</div>
                        {message.hasUploadButton && (
                          <button 
                            onClick={() => fileInputRef.current?.click()} 
                            disabled={isUploading}
                            className="mt-2 bg-green-500 text-white px-3 py-1 rounded text-sm hover:bg-green-600 transition-colors flex items-center space-x-1 disabled:opacity-50"
                          >
                            {isUploading ? <Loader2 className="w-3 h-3 animate-spin" /> : <Upload className="w-3 h-3" />}
                            <span>{isUploading ? 'Uploading...' : 'Upload Dataset'}</span>
                          </button>
                        )}
                      </div>
                    </div>
                  ))}
                  
                  {isLoading && (
                    <div className="text-left">
                      <div className="bg-gray-700 text-gray-100 rounded-lg p-3 inline-block">
                        <Loader2 className="w-4 h-4 animate-spin" />
                      </div>
                    </div>
                  )}
                </div>
                
                {/* Chat Input - EXACT from image */}
                <div className="flex space-x-2">
                  <input
                    type="text"
                    value={currentMessage}
                    onChange={(e) => setCurrentMessage(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                    placeholder="Try: 'create a housing price agent'"
                    className="flex-1 bg-black/40 border border-gray-600 rounded-full px-4 py-2 text-white placeholder-gray-400 focus:border-purple-500 focus:outline-none"
                    disabled={isLoading}
                  />
                  <button
                    onClick={handleSendMessage}
                    disabled={isLoading || !currentMessage.trim()}
                    className="bg-gradient-to-r from-purple-500 to-blue-500 text-white p-2 rounded-full hover:shadow-lg transition-all duration-300 disabled:opacity-50"
                  >
                    <Send className="w-5 h-5" />
                  </button>
                </div>
              </div>

              {/* Right Side - Upload and Services */}
              <div className="space-y-6">
                {/* Data Upload Section - ENHANCED WITH LUANTRA PROCESS DESCRIPTION */}
                <div className="bg-black/30 backdrop-blur-sm rounded-2xl border border-white/10 p-6">
                  <div className="flex items-center mb-4">
                    <Upload className="w-6 h-6 text-purple-400 mr-2" />
                    <h3 className="text-xl font-semibold text-white">Luantra Agent Process</h3>
                  </div>
                  
                  <div className="mb-6">
                    <h4 className="text-white font-medium mb-3">How it works:</h4>
                    <div className="space-y-3 text-sm">
                      <div className="flex items-start space-x-3">
                        <div className="w-6 h-6 bg-purple-500 text-white rounded-full flex items-center justify-center text-xs font-bold">1</div>
                        <div>
                          <p className="text-white font-medium">Upload your dataset</p>
                          <p className="text-gray-400">CSV, JSON, or Excel files supported</p>
                        </div>
                      </div>
                      <div className="flex items-start space-x-3">
                        <div className="w-6 h-6 bg-blue-500 text-white rounded-full flex items-center justify-center text-xs font-bold">2</div>
                        <div>
                          <p className="text-white font-medium">Luantra Agent analysis</p>
                          <p className="text-gray-400">AI analyzes columns, data types, and patterns</p>
                        </div>
                      </div>
                      <div className="flex items-start space-x-3">
                        <div className="w-6 h-6 bg-green-500 text-white rounded-full flex items-center justify-center text-xs font-bold">3</div>
                        <div>
                          <p className="text-white font-medium">Chat with Luantra Agent</p>
                          <p className="text-gray-400">Describe what you want to predict in natural language</p>
                        </div>
                      </div>
                      <div className="flex items-start space-x-3">
                        <div className="w-6 h-6 bg-orange-500 text-white rounded-full flex items-center justify-center text-xs font-bold">4</div>
                        <div>
                          <p className="text-white font-medium">Automatic agent training</p>
                          <p className="text-gray-400">Agent builds and trains on Luantra Cloud</p>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="text-center py-8 border-t border-gray-600">
                    <div className="w-16 h-16 bg-purple-500/20 rounded-full flex items-center justify-center mx-auto mb-4">
                      <Upload className="w-8 h-8 text-purple-400" />
                    </div>
                    <h4 className="text-white font-medium mb-2">Upload Dataset</h4>
                    <p className="text-gray-400 text-sm mb-4">Drag & drop or click to select</p>
                    <button
                      onClick={() => fileInputRef.current?.click()}
                      disabled={isUploading}
                      className="bg-gradient-to-r from-purple-500 to-blue-500 text-white px-6 py-2 rounded-lg hover:shadow-lg transition-all duration-300 disabled:opacity-50"
                    >
                      {isUploading ? 'Uploading...' : 'Choose File'}
                    </button>
                  </div>
                </div>

                {/* Luantra Services - EXACT from image */}
                <div className="bg-black/30 backdrop-blur-sm rounded-2xl border border-white/10 p-6">
                  <div className="flex items-center mb-4">
                    <span className="text-2xl mr-2">⭐</span>
                    <h3 className="text-xl font-semibold text-white">Luantra Services</h3>
                  </div>
                  
                  <div className="space-y-3">
                    <div className="flex items-center justify-between p-3 bg-black/40 rounded-lg">
                      <div className="flex items-center space-x-3">
                        <BarChart3 className="w-5 h-5 text-purple-400" />
                        <span className="text-white">Evaluation as a Service</span>
                      </div>
                      <CheckCircle className="w-5 h-5 text-green-400" />
                    </div>
                    
                    <div className="flex items-center justify-between p-3 bg-black/40 rounded-lg">
                      <div className="flex items-center space-x-3">
                        <CheckCircle className="w-5 h-5 text-blue-400" />
                        <span className="text-white">Validation as a Service</span>
                      </div>
                      <CheckCircle className="w-5 h-5 text-green-400" />
                    </div>
                    
                    <div className="flex items-center justify-between p-3 bg-black/40 rounded-lg">
                      <div className="flex items-center space-x-3">
                        <Eye className="w-5 h-5 text-purple-400" />
                        <span className="text-white">Monitoring as a Service</span>
                      </div>
                      <CheckCircle className="w-5 h-5 text-green-400" />
                    </div>
                    
                    <div className="flex items-center justify-between p-3 bg-black/40 rounded-lg">
                      <div className="flex items-center space-x-3">
                        <Shield className="w-5 h-5 text-orange-400" />
                        <span className="text-white">Governance as a Service</span>
                      </div>
                      <CheckCircle className="w-5 h-5 text-green-400" />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* BUILD TAB - LUANTRA AGENT FOCUSED */}
          {activeTab === 'build' && (
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              className="bg-black/30 backdrop-blur-sm rounded-2xl border border-purple-500/30 p-6"
            >
              <div className="flex items-center mb-4">
                <Brain className="w-6 h-6 text-blue-400 mr-2" />
                <h3 className="text-xl font-semibold text-white">Build Luantra Agents</h3>
              </div>
              
              {ensureArray(platformData.trainingJobs).length > 0 ? (
                <div className="space-y-4">
                  {ensureArray(platformData.trainingJobs).map((job: any, index: number) => (
                    <div key={index} className="bg-black/30 p-4 rounded-lg border border-blue-500/30">
                      <div className="flex justify-between items-start mb-2">
                        <h4 className="text-white font-medium">{job.displayName || `Luantra Agent Training ${index + 1}`}</h4>
                        <span className={`px-2 py-1 rounded text-xs ${
                          job.state === 'JOB_STATE_SUCCEEDED' ? 'bg-green-500/20 text-green-300' :
                          job.state === 'JOB_STATE_RUNNING' ? 'bg-blue-500/20 text-blue-300' :
                          job.state === 'JOB_STATE_FAILED' ? 'bg-red-500/20 text-red-300' :
                          'bg-yellow-500/20 text-yellow-300'
                        }`}>
                          {job.state?.replace('JOB_STATE_', '') || 'PENDING'}
                        </span>
                      </div>
                      <p className="text-purple-300 text-sm">ID: {job.name}</p>
                      {job.createTime && (
                        <p className="text-purple-400 text-xs mt-1">
                          Started: {new Date(job.createTime).toLocaleString()}
                        </p>
                      )}
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8">
                  <Brain className="w-16 h-16 text-purple-400 mx-auto mb-4" />
                  <p className="text-purple-300 mb-2">No training jobs yet</p>
                  <p className="text-purple-500 text-sm">Go to TALK and ask Luantra Agent to train an agent</p>
                </div>
              )}

              {/* Datasets Section */}
              {ensureArray(platformData.datasets).length > 0 && (
                <div className="mt-8">
                  <h4 className="text-white font-medium mb-4">Available Datasets ({ensureArray(platformData.datasets).length})</h4>
                  <div className="space-y-2">
                    {ensureArray(platformData.datasets).map((dataset: any, index: number) => (
                      <div key={index} className="bg-black/30 p-3 rounded-lg border border-green-500/30">
                        <div className="flex justify-between items-center">
                          <span className="text-green-300 font-medium">{dataset.name}</span>
                          <span className="text-green-400 text-sm">{dataset.size || 'Unknown size'}</span>
                        </div>
                        <p className="text-green-500 text-xs mt-1">
                          Rows: {dataset.analysis?.rowCount || 'Unknown'} | 
                          Columns: {dataset.analysis?.columns?.length || 'Unknown'}
                        </p>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Agents Section */}
              {ensureArray(platformData.models).length > 0 && (
                <div className="mt-8">
                  <h4 className="text-white font-medium mb-4">Trained Luantra Agents ({ensureArray(platformData.models).length})</h4>
                  <div className="space-y-2">
                    {ensureArray(platformData.models).map((model: any, index: number) => (
                      <div 
                        key={index} 
                        className="bg-black/30 p-3 rounded-lg border border-purple-500/30 cursor-pointer hover:bg-purple-500/10 transition-all"
                        onClick={() => handleModelClick(model)}
                      >
                        <div className="flex justify-between items-center">
                          <span className="text-purple-300 font-medium">{model.displayName}</span>
                          <span className="text-purple-400 text-sm">Click for details</span>
                        </div>
                        <p className="text-purple-500 text-xs mt-1">ID: {model.name}</p>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </motion.div>
          )}

          {/* DEPLOY TAB - LUANTRA AGENT FOCUSED */}
          {activeTab === 'deploy' && (
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              className="bg-black/30 backdrop-blur-sm rounded-2xl border border-purple-500/30 p-6"
            >
              <div className="flex items-center mb-4">
                <Zap className="w-6 h-6 text-yellow-400 mr-2" />
                <h3 className="text-xl font-semibold text-white">Deploy Luantra Agents</h3>
              </div>
              
              {ensureArray(platformData.endpoints).length > 0 ? (
                <div className="space-y-4">
                  {ensureArray(platformData.endpoints).map((endpoint: any, index: number) => (
                    <div key={index} className="bg-black/30 p-4 rounded-lg border border-yellow-500/30">
                      <div className="flex justify-between items-start mb-2">
                        <h4 className="text-white font-medium">{endpoint.displayName}</h4>
                        <span className="px-2 py-1 rounded text-xs bg-green-500/20 text-green-300">
                          DEPLOYED
                        </span>
                      </div>
                      <p className="text-yellow-300 text-sm">Endpoint: {endpoint.name}</p>
                      <div className="mt-3 flex space-x-2">
                        <button className="bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600 transition-colors">
                          Test Agent
                        </button>
                        <button className="bg-green-500 text-white px-3 py-1 rounded text-sm hover:bg-green-600 transition-colors">
                          Get API Code
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8">
                  <Zap className="w-16 h-16 text-purple-400 mx-auto mb-4" />
                  <p className="text-purple-300 mb-2">No deployed agents yet</p>
                  <p className="text-purple-500 text-sm">Train an agent first, then ask Luantra Agent to deploy it</p>
                </div>
              )}
            </motion.div>
          )}

          {/* EVALUATE TAB - ZERO DATA HANDLING */}
          {activeTab === 'evaluate' && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="bg-black/30 backdrop-blur-sm rounded-2xl border border-green-500/30 p-6"
            >
              <div className="flex items-center mb-4">
                <BarChart3 className="w-6 h-6 text-green-400 mr-2" />
                <h3 className="text-xl font-semibold text-white">Evaluation as a Service</h3>
              </div>
              
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
                <div className="bg-green-500/10 border border-green-500/30 rounded-lg p-4">
                  <h4 className="text-green-300 font-medium mb-2">Agent Accuracy</h4>
                  <p className="text-2xl font-bold text-white">{ensureArray(platformData.models).length > 0 ? '87.3%' : '0%'}</p>
                  <p className="text-green-400 text-sm">{ensureArray(platformData.models).length > 0 ? '↗ +2.1% this week' : 'No data available'}</p>
                </div>
                <div className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4">
                  <h4 className="text-blue-300 font-medium mb-2">Response Quality</h4>
                  <p className="text-2xl font-bold text-white">{ensureArray(platformData.models).length > 0 ? '92.1%' : '0%'}</p>
                  <p className="text-blue-400 text-sm">{ensureArray(platformData.models).length > 0 ? '↗ +1.5% this week' : 'No data available'}</p>
                </div>
                <div className="bg-purple-500/10 border border-purple-500/30 rounded-lg p-4">
                  <h4 className="text-purple-300 font-medium mb-2">Evaluation Jobs</h4>
                  <p className="text-2xl font-bold text-white">{ensureArray(platformData.models).length + ensureArray(platformData.endpoints).length}</p>
                  <p className="text-purple-400 text-sm">Active evaluations</p>
                </div>
              </div>
              
              <div className="space-y-4">
                <h4 className="text-white font-medium">Agent Evaluation Details</h4>
                {ensureArray(platformData.models).length === 0 ? (
                  <div className="text-center py-8 text-green-300">
                    <BarChart3 className="w-16 h-16 text-green-400 mx-auto mb-4" />
                    <p className="mb-2">No agents to evaluate yet</p>
                    <p className="text-green-500 text-sm">Deploy agents to see evaluation results</p>
                  </div>
                ) : (
                  ensureArray(platformData.models).map((model: any, index: number) => (
                    <div key={index} className="bg-green-500/10 border border-green-500/30 rounded-lg p-4">
                      <div className="flex items-center justify-between mb-3">
                        <h5 className="text-white font-medium">{model.displayName}</h5>
                        <span className="px-2 py-1 text-xs rounded-full bg-green-500/20 text-green-300">
                          Evaluated
                        </span>
                      </div>
                      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 text-sm">
                        <div>
                          <span className="text-gray-400">Accuracy:</span>
                          <p className="text-green-300 font-medium">{(85 + Math.random() * 10).toFixed(1)}%</p>
                        </div>
                        <div>
                          <span className="text-gray-400">Precision:</span>
                          <p className="text-blue-300 font-medium">{(80 + Math.random() * 15).toFixed(1)}%</p>
                        </div>
                        <div>
                          <span className="text-gray-400">Recall:</span>
                          <p className="text-purple-300 font-medium">{(82 + Math.random() * 12).toFixed(1)}%</p>
                        </div>
                        <div>
                          <span className="text-gray-400">F1 Score:</span>
                          <p className="text-yellow-300 font-medium">{(83 + Math.random() * 10).toFixed(1)}%</p>
                        </div>
                      </div>
                      <div className="mt-3 flex space-x-2">
                        <button className="bg-green-500/20 text-green-300 px-3 py-1 rounded text-sm hover:bg-green-500/30">
                          View Report
                        </button>
                        <button className="bg-blue-500/20 text-blue-300 px-3 py-1 rounded text-sm hover:bg-blue-500/30">
                          Compare Agents
                        </button>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </motion.div>
          )}

          {/* VALIDATE TAB - ZERO DATA HANDLING */}
          {activeTab === 'validate' && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="bg-black/30 backdrop-blur-sm rounded-2xl border border-blue-500/30 p-6"
            >
              <div className="flex items-center mb-4">
                <CheckCircle className="w-6 h-6 text-blue-400 mr-2" />
                <h3 className="text-xl font-semibold text-white">Validation as a Service</h3>
              </div>
              
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
                <div className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4">
                  <h4 className="text-blue-300 font-medium mb-2">Data Quality</h4>
                  <p className="text-2xl font-bold text-white">{ensureArray(platformData.models).length > 0 ? '94.2%' : '0%'}</p>
                  <p className="text-blue-400 text-sm">{ensureArray(platformData.models).length > 0 ? 'High quality' : 'No data available'}</p>
                </div>
                <div className="bg-green-500/10 border border-green-500/30 rounded-lg p-4">
                  <h4 className="text-green-300 font-medium mb-2">Schema Validation</h4>
                  <p className="text-2xl font-bold text-white">{ensureArray(platformData.models).length > 0 ? '100%' : '0%'}</p>
                  <p className="text-green-400 text-sm">{ensureArray(platformData.models).length > 0 ? 'All checks passed' : 'No data available'}</p>
                </div>
                <div className="bg-purple-500/10 border border-purple-500/30 rounded-lg p-4">
                  <h4 className="text-purple-300 font-medium mb-2">Test Coverage</h4>
                  <p className="text-2xl font-bold text-white">{ensureArray(platformData.models).length > 0 ? '89.7%' : '0%'}</p>
                  <p className="text-purple-400 text-sm">{ensureArray(platformData.models).length > 0 ? 'Good coverage' : 'No data available'}</p>
                </div>
              </div>
              
              <div className="space-y-4">
                <h4 className="text-white font-medium">Agent Validation Results</h4>
                {ensureArray(platformData.models).length === 0 ? (
                  <div className="text-center py-8 text-blue-300">
                    <CheckCircle className="w-16 h-16 text-blue-400 mx-auto mb-4" />
                    <p className="mb-2">No agents to validate yet</p>
                    <p className="text-blue-500 text-sm">Create more agents to enable validation</p>
                  </div>
                ) : (
                  ensureArray(platformData.models).map((model: any, index: number) => (
                    <div key={index} className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4">
                      <div className="flex items-center justify-between mb-3">
                        <h5 className="text-white font-medium">{model.displayName}</h5>
                        <span className="px-2 py-1 text-xs rounded-full bg-green-500/20 text-green-300">
                          Validated
                        </span>
                      </div>
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm mb-3">
                        <div>
                          <span className="text-gray-400">Data Drift:</span>
                          <p className="text-blue-300 font-medium">{(Math.random() * 5).toFixed(2)}%</p>
                        </div>
                        <div>
                          <span className="text-gray-400">Agent Stability:</span>
                          <p className="text-green-300 font-medium">High</p>
                        </div>
                        <div>
                          <span className="text-gray-400">Validation Score:</span>
                          <p className="text-purple-300 font-medium">{(90 + Math.random() * 8).toFixed(1)}%</p>
                        </div>
                      </div>
                      <div className="flex space-x-2">
                        <button className="bg-blue-500/20 text-blue-300 px-3 py-1 rounded text-sm hover:bg-blue-500/30">
                          A/B Test
                        </button>
                        <button className="bg-green-500/20 text-green-300 px-3 py-1 rounded text-sm hover:bg-green-500/30">
                          Cross Validate
                        </button>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </motion.div>
          )}

          {/* MONITOR TAB - Monitoring as a Service */}
          {activeTab === 'monitor' && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="bg-black/30 backdrop-blur-sm rounded-2xl border border-purple-500/30 p-6"
            >
              <div className="flex items-center mb-4">
                <Eye className="w-6 h-6 text-purple-400 mr-2" />
                <h3 className="text-xl font-semibold text-white">Monitoring as a Service</h3>
              </div>
              
              <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 mb-6">
                <div className="bg-green-500/10 border border-green-500/30 rounded-lg p-4">
                  <h4 className="text-green-300 font-medium mb-2">Uptime</h4>
                  <p className="text-2xl font-bold text-white">{ensureArray(platformData.endpoints).length > 0 ? '99.9%' : '0%'}</p>
                  <p className="text-green-400 text-sm">{ensureArray(platformData.endpoints).length > 0 ? 'Excellent' : 'No endpoints deployed'}</p>
                </div>
                <div className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4">
                  <h4 className="text-blue-300 font-medium mb-2">Avg Latency</h4>
                  <p className="text-2xl font-bold text-white">{ensureArray(platformData.endpoints).length > 0 ? '120ms' : '0ms'}</p>
                  <p className="text-blue-400 text-sm">{ensureArray(platformData.endpoints).length > 0 ? 'Fast response' : 'No data'}</p>
                </div>
                <div className="bg-yellow-500/10 border border-yellow-500/30 rounded-lg p-4">
                  <h4 className="text-yellow-300 font-medium mb-2">Requests/min</h4>
                  <p className="text-2xl font-bold text-white">{ensureArray(platformData.endpoints).length > 0 ? '247' : '0'}</p>
                  <p className="text-yellow-400 text-sm">{ensureArray(platformData.endpoints).length > 0 ? 'Active usage' : 'No activity'}</p>
                </div>
                <div className="bg-red-500/10 border border-red-500/30 rounded-lg p-4">
                  <h4 className="text-red-300 font-medium mb-2">Error Rate</h4>
                  <p className="text-2xl font-bold text-white">{ensureArray(platformData.endpoints).length > 0 ? '0.1%' : '0%'}</p>
                  <p className="text-red-400 text-sm">{ensureArray(platformData.endpoints).length > 0 ? 'Very low' : 'No errors tracked'}</p>
                </div>
              </div>
              
              <div className="space-y-4">
                <h4 className="text-white font-medium">Agent Health Monitoring</h4>
                {ensureArray(platformData.endpoints).length === 0 ? (
                  <div className="text-center py-8 text-purple-300">
                    <Eye className="w-16 h-16 text-purple-400 mx-auto mb-4" />
                    <p className="mb-2">No agents to monitor yet</p>
                    <p className="text-purple-500 text-sm">Deploy agents to see monitoring data</p>
                  </div>
                ) : (
                  <div className="text-center py-8 text-purple-300">
                    <Eye className="w-16 h-16 text-purple-400 mx-auto mb-4" />
                    <p className="mb-2">Agent monitoring active</p>
                    <p className="text-purple-500 text-sm">{ensureArray(platformData.endpoints).length} endpoint(s) being monitored</p>
                  </div>
                )}
              </div>
            </motion.div>
          )}

          {/* GOVERN TAB - Governance as a Service */}
          {activeTab === 'govern' && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="bg-black/30 backdrop-blur-sm rounded-2xl border border-amber-500/30 p-6"
            >
              <div className="flex items-center mb-4">
                <Shield className="w-6 h-6 text-amber-400 mr-2" />
                <h3 className="text-xl font-semibold text-white">Governance as a Service</h3>
              </div>
              
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
                <div className="bg-green-500/10 border border-green-500/30 rounded-lg p-4">
                  <h4 className="text-green-300 font-medium mb-2">Compliance Score</h4>
                  <p className="text-2xl font-bold text-white">{ensureArray(platformData.models).length > 0 ? '95%' : '0%'}</p>
                  <p className="text-green-400 text-sm">{ensureArray(platformData.models).length > 0 ? 'Excellent compliance' : 'No agents to assess'}</p>
                </div>
                <div className="bg-yellow-500/10 border border-yellow-500/30 rounded-lg p-4">
                  <h4 className="text-yellow-300 font-medium mb-2">Policy Violations</h4>
                  <p className="text-2xl font-bold text-white">{ensureArray(platformData.models).length > 0 ? '0' : '0'}</p>
                  <p className="text-yellow-400 text-sm">{ensureArray(platformData.models).length > 0 ? 'No violations' : 'No policies active'}</p>
                </div>
                <div className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4">
                  <h4 className="text-blue-300 font-medium mb-2">Audit Logs</h4>
                  <p className="text-2xl font-bold text-white">{ensureArray(platformData.models).length > 0 ? '47' : '0'}</p>
                  <p className="text-blue-400 text-sm">{ensureArray(platformData.models).length > 0 ? 'Active logging' : 'No audits performed'}</p>
                </div>
              </div>
              
              <div className="space-y-4">
                <h4 className="text-white font-medium">Agent Governance Overview</h4>
                {ensureArray(platformData.models).length === 0 ? (
                  <div className="text-center py-8 text-amber-300">
                    <Shield className="w-16 h-16 text-amber-400 mx-auto mb-4" />
                    <p className="mb-2">No agents under governance yet</p>
                    <p className="text-amber-500 text-sm">Create agents to see governance policies</p>
                  </div>
                ) : (
                  <div className="text-center py-8 text-amber-300">
                    <Shield className="w-16 h-16 text-amber-400 mx-auto mb-4" />
                    <p className="mb-2">Agent governance active</p>
                    <p className="text-amber-500 text-sm">{ensureArray(platformData.models).length} agent(s) under governance</p>
                  </div>
                )}
              </div>
            </motion.div>
          )}
        </div>
      </main>

      {/* Agent Details Modal */}
      <ModelDetailsModal 
        model={selectedModel} 
        isOpen={isModelModalOpen} 
        onClose={() => setIsModelModalOpen(false)} 
      />
    </div>
  );
};

export default DashboardPage;
